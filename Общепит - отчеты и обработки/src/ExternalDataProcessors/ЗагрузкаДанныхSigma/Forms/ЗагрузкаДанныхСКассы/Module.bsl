Перем ТЗНоменклатура, ОшибкаОрганизации;

&НаКлиенте
Процедура Загрузить(Команда)
	Если СтрДлина(ТокенЛичногоКабинета) <> 36 тогда
		Сообщить("Неверный ключ интеграции!");
	Иначе
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьЗавершение", ЭтаФорма), "Загрузить документы с сервера " + АдресСервераКасл + "?",РежимДиалогаВопрос.ДаНетОтмена,0,,);
		
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОшибкаЗагрузки = Ложь;
		ЗагрузитьНаСервере();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНаСервере()
	Грузим = РП ИЛИ ПН ИЛИ ОТ ИЛИ ПКО ИЛИ БП ИЛИ РКО ИЛИ УЦ ИЛИ ИН ИЛИ БНР ИЛИ ПС;
	Если (Период.ДатаОкончания-Период.датаНачала)/86400 > 31 Тогда
		Сообщить("Выбранный период превышает месяц!");
		Возврат;
	ИначеЕсли Период.ДатаНачала > Период.ДатаОкончания ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(Период.ДатаОкончания)тогда
		Сообщить("Выбран неверный период!");
		Возврат;		
	КонецЕсли;
	
	Если Грузим тогда
		ОчиститьТаблицы();
		ОшибкаОрганизации = Новый ТаблицаЗначений;
		ОшибкаОрганизации.Колонки.Добавить("ТекстОшибки");
		АдресОшибки = ПоместитьВоВременноеХранилище(ОшибкаОрганизации,УИДФормы);
		ИнициализироватьИменаКолонок();
		ЗаполнитьСоответствия();
		СообщитьОшибкуОрганизации();
		Если НЕ ОшибкаЗагрузки тогда
			Сообщить("Загрузка данных завершена, сопоставьте объекты при необходимости.");
		Иначе
			Возврат;
		КонецЕсли;		
	Иначе
		ДобавитьЛог("Не выбран ни один тип документов!!!");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере                                       
Процедура ИнициализироватьИменаКолонок()
	ОшибкаФайла = Ложь;	
	ПериодЗагрузки = ПодготовитьДату();
	ЗапросыКДокументам = СоздатьСтруктуруЗапросовКДокументам();
	
	Если ПН тогда		
		АдресПН = ЗагрузитьЗапросом(ЗапросыКДокументам.ПН + ПериодЗагрузки,АдресПН);
		Если АдресПН <> "" тогда
			ЗагрузитьПоставщиковНаСервере();
			ЗагрузитьНоменклатуруНаСервере();
			ЗагрузитьУслугиНаСервере();
			ЗагрузитьЗСкладыНаСервере();			
		КонецЕсли;
	КонецЕсли;
	
	Если РП тогда
		Пауза(20);
		АдресРП = ЗагрузитьЗапросом(ЗапросыКДокументам.РП + ПериодЗагрузки,АдресРП);
		Если АдресРП <> "" тогда			
			ЗагрузитьНоменклатуруНаСервере();
			ЗагрузитьУслугиНаСервере();
			ЗагрузитьУстройстваНаСервере();
			ЗагрузитьЗСкладыНаСервере();
			ЗагрузитьСпособыОплатыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ПС тогда
		Пауза(20);
		АдресПС = ЗагрузитьЗапросом(ЗапросыКДокументам.ПС + ПериодЗагрузки,АдресПС);
		Если АдресПС <> "" тогда			
			ЗагрузитьНоменклатуруНаСервере();			
			ЗагрузитьЗСписанияНаСервере();
			ЗагрузитьСотрудниковНаСервере();
			ЗагрузитьЗСкладыНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Если ИН тогда
		Пауза(20); 
		АдресИН = ЗагрузитьЗапросом(ЗапросыКДокументам.ИН + ПериодЗагрузки,АдресИН);
		Если АдресИН <> "" тогда			
			ЗагрузитьСотрудниковНаСервере();
			ЗагрузитьНоменклатуруНаСервере();			
			ЗагрузитьЗСкладыНаСервере();
		КонецЕсли;
	КонецЕсли;  
	
	
	                                                 
КонецПроцедуры

&НаСервере
Функция ПрочитатьФайл(Текст,НоменклатураНужна)
	
	ТЗ = Новый ТаблицаЗначений;
	Шапка = Текст.ПолучитьСтроку(1);
	МассивШапки = СтрРазделить(Шапка,Символы.Таб);
	
	СоздатьШапкуТЗ(МассивШапки,ТЗ);
	
	Для НомерСтроки = 2 по Текст.КоличествоСтрок() цикл
		Строка = Текст.ПолучитьСтроку(НомерСтроки);
		МассивСтроки = СтрРазделить(Строка,Символы.Таб);
		ЗаписатьСтрокуВТаблицу(ТЗ,МассивСтроки,НоменклатураНужна);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецФункции

&НаСервере
Процедура СоздатьШапкуТЗ(МассивШапки,ТЗ)
	
	Для каждого Стр из МассивШапки Цикл
		Пока Найти(Стр," ") > 0 ИЛИ Найти(Стр,")") ИЛИ Найти(Стр,"(") ИЛИ Найти(Стр,"/") цикл
			Стр = СтрЗаменить(Стр," ","");
			Стр = СтрЗаменить(Стр,"(","");
			Стр = СтрЗаменить(Стр,")","");
			Стр = СтрЗаменить(Стр,"/","");
		КонецЦикла;		
		ТЗ.Колонки.Добавить(Стр);	
	КонецЦикла;
	                                         
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВТаблицу(ТЗ,МассивСтроки,НоменклатураНужна)
	
	// Этот кусок нужен чтобы отсеять битую номенклатуру. Если у нее есть где то символ переноса строки
	// то количество элементов массива будет больше 11 и тогда нам такие не нужны.
	//Если (ТЗ.Колонки.Найти("VARIATION_NAME")<> Неопределено И МассивСтроки.Количество() <> 12) ИЛИ (ТЗ.Колонки.Найти("VARIATION_NAME")<> Неопределено И МассивСтроки.Количество() <> 11)  тогда
	//	Возврат;
	//КонецЕсли;
	
	
	Стр = ТЗ.Добавить();
	
	Для НомерКолонки = 0 ПО МассивСтроки.Количество()-1 цикл		
		Если Сред(МассивСтроки[НомерКОлонки],СтрДлина(МассивСтроки[НомерКОлонки]),1) = Символ(34) И Сред(МассивСтроки[НомерКОлонки],0,1) = Символ(34) тогда
			Стр[НомерКолонки] = Сред(МассивСтроки[НомерКОлонки],2,СтрДлина(МассивСтроки[НомерКОлонки])-2);	
		Иначе			
			Стр[НомерКолонки] = МассивСтроки[НомерКОлонки];	
		КонецЕсли;
		// Уберем двойные кавычки
		Стр[НомерКолонки] = СтрЗаменить(Стр[НомерКолонки],Символ(34)+Символ(34), Символ(34));
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНоменклатуру(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	Для каждого Стр из ТЗ Цикл
		Если Объект.Номенклатура.НайтиСтроки(Новый Структура("КодСимпл",Стр.НоменклатураКод)).Количество() = 0 И Стр.НоменклатураКод <> "" тогда
			Строка = Объект.Номенклатура.Добавить();
			Строка.КодСимпл = Стр.НоменклатураКод;
			Строка.НаименованиеСимпл = Стр.НоменклатураНаименование;
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЗ,АдресТЗ);
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииНаСервере()
	
	Если Найти(Метаданные.Представление(),"Управление торговлей") > 0 тогда
		ИмяКонфигурации = "УТ";
		Элементы.ВидЦеныЗакупки.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
		Элементы.ВидЦеныПродажи.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыЦен");
		Элементы.СтатьяПрочихДоходовРасходов.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
		Элементы.СтатьяРасходовУТ.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");		
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Контрагент", "Объект.КонтрагентДляотбора");
		Элементы.СотрудникиСотрудник1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.СтатьяРасходовУТ.Видимость = Истина;
		Элементы.СпособыОплатыТипОплаты1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЭквайринговыеТерминалы");
		Элементы.КассыКасса1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КассыККМ");
		Элементы.КассыКассаОрганизации.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Кассы");
		Элементы.СтатьиЗатратСтатьяЗатрат1С.ОграничениеТипа = Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиРасходов");
		Элементы.СтатьиЗатратСчетЗатрат1С.Видимость = Ложь;
	Иначе
		Элементы.ВидЦеныЗакупки.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
		Элементы.ВидЦеныПродажи.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ТипыЦенНоменклатуры");
		Элементы.СтатьяПрочихДоходовРасходов.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы");
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.КонтрагентДляотбора");
		Элемент = Элементы.СотрудникиСотрудник1С;
		Элемент.ВыбиратьТип = Ложь;
		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.КассыКассаОрганизации.Видимость = Ложь;
		Элементы.КассыКасса1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.СтатьиЗатратСтатьяЗатрат1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.СтатьиЗатрат");
		Элементы.СтатьиЗатратСчетЗатрат1С.ОграничениеТипа = Новый ОписаниеТипов("ПланСчетовСсылка.Хозрасчетный");
		Элементы.СтатьиЗатратСчетЗатрат1С.Видимость = Истина;
		Элементы.СпособыОплатыТипОплаты1С.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ВидыОплатОрганизаций");
		Элементы.СтатьяРасходовУТ.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы");
	КонецЕсли; 
	
	Элементы.Организация.Видимость = НЕ ОрганизацияИзДокумента;
	Элементы.СтраницаЛоги.Видимость = Ложь;
	ТЗНоменклатура = Новый ТаблицаЗначений;
	АдресНоменклатуры = ПоместитьВоВременноеХранилище(ТЗНоменклатура,УИДФормы);
	ВидимостьВкладок();	
	Объект.ПанельЛогов.Очистить();
	Организация = ПроверитьОрганизацию();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ПриОткрытииНаСервере();	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//ХранилищеОбщихНастроек.Удалить("ЗагрузкаСИМПЛ",неопределено,неопределено);
	Объект.Версия = "0.1.02";
	ОшибкаЗагрузки = Ложь;
	УИДФормы = Новый УникальныйИдентификатор;
	Настройки = ХранилищеОбщихНастроек.Загрузить("ЗагрузкаСИМПЛ",,,);
	Если Настройки = Неопределено тогда
		Настройки = СоздатьСтруктуруНастроек();
		ХранилищеОбщихНастроек.Сохранить("ЗагрузкаСИМПЛ",,Настройки,);
		АдресОбъектов = ПоместитьВоВременноеХранилище(Настройки,УИДФормы);
	Иначе
		АдресОбъектов = ПоместитьВоВременноеХранилище(Настройки,УИДФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруНастроек()
	
	ОбщиеНастройки = Новый Структура;
	ОбщиеНастройки.Вставить("Версия", "0.1.02"); 	 
	
	//Контрагенты = Новый ТаблицаЗначений;
	//Контрагенты.Колонки.Добавить("КодСИМПЛ"); 
	//Контрагенты.Колонки.Добавить("Значение");
	//Контрагенты.Колонки.Добавить("Договор");
	//
	//Склады = Новый ТаблицаЗначений;
	//Склады.Колонки.Добавить("КодСИМПЛ"); 
	//Склады.Колонки.Добавить("Значение");
	//Склады.Колонки.Добавить("Подразделение");
	//
	//Номенклатура = Новый ТаблицаЗначений;
	//Номенклатура.Колонки.Добавить("КодСИМПЛ"); 
	//Номенклатура.Колонки.Добавить("Значение");
	//
	//ТипыНоменклатуры = Новый ТаблицаЗначений;
	//ТипыНоменклатуры.Колонки.Добавить("КодСИМПЛ"); 
	//ТипыНоменклатуры.Колонки.Добавить("Значение");
	//
	//СтатьиЗатрат = Новый ТаблицаЗначений;
	//СтатьиЗатрат.Колонки.Добавить("СтатьяРасходовСИМПЛ");
	//СтатьиЗатрат.Колонки.Добавить("СтатьяЗатрат1С");
	//СтатьиЗатрат.Колонки.Добавить("СчетЗатрат1С");
	//
	//Сотрудники = Новый ТаблицаЗначений;
	//Сотрудники.Колонки.Добавить("КодСИМПЛ"); 
	//Сотрудники.Колонки.Добавить("Значение");
	
	СоответствияОбъектов = Новый ТаблицаЗначений;
	СоответствияОбъектов.Колонки.Добавить("Объект");
	СоответствияОбъектов.Колонки.Добавить("ГУИД");
	СоответствияОбъектов.Колонки.Добавить("ТипОбъекта");
	СоответствияОбъектов.Колонки.Добавить("ДопЗначение1");
	СоответствияОбъектов.Колонки.Добавить("ДопЗначение2");
	СоответствияОбъектов.Колонки.Добавить("ДопЗначение3");
	
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("ОбщиеНастройки", ОбщиеНастройки);	
	//СохраненнаяНастройка.Вставить("Поставщики", Контрагенты);
	//СохраненнаяНастройка.Вставить("Склады", Склады);
	//СохраненнаяНастройка.Вставить("Номенклатура", Номенклатура);
	//СохраненнаяНастройка.Вставить("ТипыНоменклатуры", ТипыНоменклатуры);
	//СохраненнаяНастройка.Вставить("Сотрудники", Сотрудники);
	//СохраненнаяНастройка.Вставить("СтатьиЗатрат", СтатьиЗатрат);
	СохраненнаяНастройка.Вставить("СоответствияОбъектов", СоответствияОбъектов);
	
	ТекущаяНастройка = Новый Структура;
	ТекущаяНастройка.Вставить("ИмяОбъекта"             , "simple->БП30");
	ТекущаяНастройка.Вставить("Пользователь"           , ПараметрыСеанса.ТекущийПользователь);
	ТекущаяНастройка.Вставить("НаименованиеНастройки"  , "ТаблицыСоответствий.iikoRMS");
	ТекущаяНастройка.Вставить("ИспользоватьПриОткрытии", Истина);
	ТекущаяНастройка.Вставить("СохранятьАвтоматически" , Истина);
	ТекущаяНастройка.Вставить("СохраненнаяНастройка"   , СохраненнаяНастройка);
	
	Возврат ТекущаяНастройка;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТипНоменклатуры(АдресТЗ)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	Для каждого Стр из ТЗ Цикл
		Если Объект.ТипыНоменклатуры.НайтиСтроки(Новый Структура("КодСимпл",Стр.ТипТовараКод)).Количество() = 0 И Стр.ТипТовараКод <> "" тогда
			Строка = Объект.ТипыНоменклатуры.Добавить();
			Строка.КодСимпл = Стр.ТипТовараКод;
			Строка.НаименованиеСимпл = Стр.ТипТовараНаименование;
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКассы(АдресТЗ)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	Для каждого Стр из ТЗ Цикл
		Если Объект.Кассы.НайтиСтроки(Новый Структура("КодСимпл",Стр.КассаКод)).Количество() = 0 И Стр.КассаКод <> "" тогда
			Строка = Объект.Кассы.Добавить();
			Строка.КодСимпл = Стр.КассаКод;
			Строка.НаименованиеСимпл = Стр.КассаНаименование;
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЗ,УИДФормы); 	
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере()
	
	Ошибка = 0;
	Объект.ПанельЛогов.Очистить();
	Ошибка = СохранитьСоответствия(Ошибка);
	Элементы.СтраницаЛоги.Видимость = Истина;	
	
	УТ = Найти(Метаданные.Представление(),"Управление торговлей") > 0;
	Ошибка = ПроверитьЗаполненностьРеквизитов();
	Если Ошибка > 0 тогда 
		Возврат;
	Иначе
		Если НЕ УТ тогда
			ПолучитьСчетаУчета();
		КонецЕсли;

		Если ПН И АдресПН <> "" тогда
			СоздатьДокументыПН();	
		КонецЕсли;		
		
		Если РП И АдресРП <> "" тогда 
			СоздатьДокументыРП();
		КонецЕсли;
		
		Если ПС И АдресПС <> "" тогда
			СоздатьДокументыПС();	
		КонецЕсли;		
				
		Если ИН И АдресИН <> "" тогда 
			СоздатьДокументыИнвентаризации();	
		КонецЕсли;  		
		
		Сообщить("Создание документов завершено.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СоздатьДокументыНаСервере();
	Элементы.СоздатьНоменклатуру.Доступность = Ложь;
	Элементы.СоздатьВсюНоменклатуру.Доступность = Ложь;
	Элементы.СоздатьВсехКонтрагентов.Доступность = Ложь;
	Элементы.СоздатьКонтрагента.Доступность = Ложь;
КонецПроцедуры

&НаСервере
Функция СохранитьСоответствия(Ошибка)
	Ошибка = СохранитьКонтрагентов(Ошибка);
	Ошибка = СохранитьТипыНоменклатуры(Ошибка);
	Ошибка = СохранитьНоменклатуру(Ошибка);
	Ошибка = СохранитьКассы(Ошибка);
	Ошибка = СохранитьСклады(Ошибка);
	Ошибка = СохранитьСотрудников(Ошибка);
	Ошибка = СохранитьСтатьиДДС(Ошибка);
	Ошибка = СохранитьСпособыОплаты(Ошибка);	
	Если Ошибка <> 0 тогда 
		Возврат Ошибка;
	Иначе
		СохранитьНастройки();
		Возврат Ошибка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СохранитьКонтрагентов(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.Контрагенты цикл
		Если ЗначениеЗаполнено(Стр.Контрагент1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Поставщики"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.Контрагент1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.Контрагент1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "Поставщики";
				НоваяСтрока.ДопЗначение1 = Стр.Договор;
				НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСИМПЛ;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Контрагент не сопоставлен!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;
КонецФункции

&НаСервере
Функция СохранитьТипыНоменклатуры(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.ТипыНоменклатуры цикл
		Если ЗначениеЗаполнено(Стр.ТипНоменклатуры1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.НаименованиеСИМПЛ,"ТипНоменклатуры"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.ТипНоменклатуры1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.ТипНоменклатуры1С;
				НоваяСтрока.ГУИД = Стр.НаименованиеСИМПЛ;
				НоваяСтрока.ТипОбъекта = "ТипНоменклатуры";
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Тип номенклатуры не сопоставлен!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;	
КонецФункции

&НаСервере
Функция СохранитьНоменклатуру(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.Номенклатура цикл
		Если ЗначениеЗаполнено(Стр.Номенклатура1С) тогда                                                                                                            
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ДопЗначение1,ТипОбъекта,ГУИД",Стр.КодСимпл,"Номенклатура",Стр.idqasl));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.Номенклатура1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.Номенклатура1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "Номенклатура";
				НоваяСтрока.ДопЗначение1 = Стр.КодСИМПЛ;
				НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСимпл;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Номенклатура не сопоставлена!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;	
КонецФункции

&НаСервере
Функция СохранитьКассы(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.Кассы цикл
		Если ЗначениеЗаполнено(Стр.Касса1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Устройства"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.Касса1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.Касса1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "Устройства";
				НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСимпл;
				НоваяСтрока.ДопЗначение1 = Стр.КодСИМПЛ;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Касса не сопоставлена!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;
КонецФункции

&НаСервере
Функция СохранитьСотрудников(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.Сотрудники цикл
		Если ЗначениеЗаполнено(Стр.Сотрудник1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Сотрудники"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.Сотрудник1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.Сотрудник1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "Сотрудники";
				НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСимпл;
				НоваяСтрока.ДопЗначение1 = Стр.КодСИМПЛ;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Сотрудник не сопоставлена!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;
КонецФункции

&НаСервере
Функция СохранитьСклады(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.Склады цикл
		Если ЗначениеЗаполнено(Стр.Склад1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Склады"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.Склад1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.Склад1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "Склады";
				НоваяСтрока.ДопЗначение1 = Стр.КодQasl;
				НоваяСтрока.ДопЗначение2 = Стр.НаименованиеQasl;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Склад не сопоставлена!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;	
КонецФункции

&НаСервере
Функция СохранитьСпособыОплаты(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.СпособыОплаты цикл
		Если ЗначениеЗаполнено(Стр.ТипОплаты1С) тогда
			Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"СпособыОплаты"));
			Если Строка.Количество() > 0 Тогда
				Строка[0].Объект = Стр.ТипОплаты1С;				
			Иначе
				НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
				НоваяСтрока.Объект = Стр.ТипОплаты1С;
				НоваяСтрока.ГУИД = Стр.idqasl;
				НоваяСтрока.ТипОбъекта = "СпособыОплаты";
				НоваяСтрока.ДопЗначение1 = Стр.Фискальный;
				НоваяСтрока.ДопЗначение2 = Стр.NameQasl;
			КонецЕсли;
		Иначе
			Ошибка = Ошибка + 1;
			ДобавитьЛог("Способы оплаты не сопоставлены!");
			Возврат Ошибка;
		КонецЕсли;		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;	
КонецФункции

&НаСервере
Функция СохранитьСтатьиДДС(Ошибка)
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Для каждого Стр из Объект.СтатьиДДС цикл
		Если ИмяКонфигурации <> "УТ" тогда
			Если ЗначениеЗаполнено(Стр.СтатьяЗатрат1С) И ЗначениеЗаполнено(Стр.СчетЗатрат1С) тогда
				Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"СтатьиСписаний"));
				Если Строка.Количество() > 0 Тогда
					Строка[0].Объект = Стр.СтатьяЗатрат1С;				
				Иначе
					НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
					НоваяСтрока.Объект = Стр.СтатьяЗатрат1С;
					НоваяСтрока.ГУИД = Стр.idqasl;
					НоваяСтрока.ТипОбъекта = "СтатьиСписаний";
					НоваяСтрока.ДопЗначение1 = Стр.СчетЗатрат1С;
					НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСимпл;
				КонецЕсли;
			Иначе
				Ошибка = Ошибка + 1;
				ДобавитьЛог("Статья ДДС не сопоставлена!");
				Возврат Ошибка;
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Стр.СтатьяЗатрат1С) тогда
				Строка =  СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"СтатьиСписаний"));
				Если Строка.Количество() > 0 Тогда
					Строка[0].Объект = Стр.СтатьяЗатрат1С;				
				Иначе
					НоваяСтрока = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
					НоваяСтрока.Объект = Стр.СтатьяЗатрат1С;
					НоваяСтрока.ГУИД = Стр.idqasl;
					НоваяСтрока.ТипОбъекта = "СтатьиСписаний";
					НоваяСтрока.ДопЗначение1 = Стр.СчетЗатрат1С;
					НоваяСтрока.ДопЗначение2 = Стр.НаименованиеСимпл;
				КонецЕсли;
			Иначе
				Ошибка = Ошибка + 1;
				ДобавитьЛог("Статья ДДС не сопоставлена!");
				Возврат Ошибка;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненнаяНастройка,УИДФормы);
	Возврат Ошибка;
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствия()
	Настройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	ВосстановитьКонтрагентов(Настройки);
	ВосстановитьТипыНоменклатуры(Настройки);
	ВосстановитьНоменклатуру(Настройки);
	ВосстановитьКассы(Настройки);
	ВосстановитьСотрудников(Настройки);
	ВосстановитьСтатьиДДС(Настройки);
	ВосстановитьСклады(Настройки);
	ВосстановитьСпособыОплаты(Настройки);
	
	ПоместитьВоВременноеХранилище(Настройки,АдресОбъектов);
КонецПроцедуры

&НаСервере
Процедура ВосстановитьКонтрагентов(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.Контрагенты цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Поставщики"));
		Если Строка.Количество() > 0 тогда 
			Стр.Контрагент1С = Строка[0].Объект;
			Стр.Договор = Строка[0].ДопЗначение1;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьТипыНоменклатуры(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.ТипыНоменклатуры цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.НаименованиеСИМПЛ,"ТипНоменклатуры"));
		Если Строка.Количество() > 0 тогда 
			Стр.ТипНоменклатуры1С = Строка[0].Объект;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНоменклатуру(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.Номенклатура цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Номенклатура"));
		Если Строка.Количество() > 0 тогда 
			Стр.Номенклатура1С = Строка[0].Объект;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьКассы(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.Кассы цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Устройства"));
		Если Строка.Количество() > 0 тогда 
			Стр.Касса1С = Строка[0].Объект;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСклады(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.Склады цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Склады"));
		Если Строка.Количество() > 0 тогда 
			Стр.Склад1С = Строка[0].Объект;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСпособыОплаты(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.СпособыОплаты цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"СпособыОплаты"));
		Если Строка.Количество() > 0 тогда 
			Стр.ТипОплаты1С = Строка[0].Объект;
			Стр.Фискальный = Строка[0].ДопЗначение1;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСотрудников(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.Сотрудники цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"Сотрудники"));
		Если Строка.Количество() > 0 тогда 
			Стр.Сотрудник1С = Строка[0].Объект;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСтатьиДДС(СохраненнаяНастройка)
	
	Для каждого Стр из Объект.СтатьиДДС цикл
		Строка = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Стр.idqasl,"СтатьиСписания"));
		Если Строка.Количество() > 0 тогда 
			Стр.СтатьяЗатрат1С = Строка[0].Объект;
			стр.СчетЗатрат1С = Строка[0].ДопЗначение1;;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Настройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	ХранилищеОбщихНастроек.Сохранить("ЗагрузкаСИМПЛ",,Настройки,);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыРП()
	ТЗ = ПолучитьИзВременногоХранилища(АдресРП);	
	ТЗПромежуточная = ТЗ.Скопировать();
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);	
	// Тимур - старт - 20.03.2020
	ТЗДляРасчетаОплат	= ТЗ.Скопировать();
	Для каждого СтрокаТЗ Из ТЗДляРасчетаОплат Цикл
		СтрокаТЗ.Date		= НачалоДня(ПолучитьДату(СтрокаТЗ.Date));
		СтрокаТЗ.DEVICE_ID	= СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",СтрокаТЗ.DEVICE_ID))[0].Объект;
	КонецЦикла;
	// финиш - 20.03.2020
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Date = НачалоДня(ПолучитьДату(Стр.Date));
		Стр.DEVICE_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.DEVICE_ID))[0].Объект;
		Если Стр.STOREH_ID <> Неопределено тогда
			Стр.STOREH_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.STOREH_ID))[0].Объект;		
		КонецЕсли;
		Если Стр.ITEM_VARIATION_ID <> "" тогда
			Попытка
			Стр.ITEM_VARIATION_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.ITEM_VARIATION_ID))[0].Объект;
			Стр.UNIT_ID = Стр.ITEM_VARIATION_ID.ЕдиницаИзмерения;
		Исключение
			Стр.ITEM_VARIATION_ID = Неопределено;
			Стр.UNIT_ID = Неопределено;
			Сообщить("");
		КонецПопытки;
		
		КонецЕсли;
	КонецЦикла;
	
	ДокументыРП = ТЗПромежуточная.Скопировать();
	// Тимур - старт - 20.03.2020
	//ДокументыРП.Свернуть("date,SHIFT_ID,DEVICE_ID");
	ДокументыРП.Свернуть("date,DEVICE_ID");
	// финиш - 20.03.2020
	ДокументыРП.Сортировать("date");

	Если ИмяКонфигурации <> "УТ" тогда
		СчетКассы = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		// Тимур - старт - 18.03.2020
		Штука				= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("870");
		
		ПланСчетовМенеджер	= ПланыСчетов.Хозрасчетный;
		СчетБлюда			= ПланСчетовМенеджер.ГотоваяПродукция;
		СчетТовар			= ПланСчетовМенеджер.ТоварыНаСкладах;
		СчетРасходов		= ПланСчетовМенеджер.СебестоимостьПродажНеЕНВД;
		СчетДоходов			= ПланСчетовМенеджер.ВыручкаНеЕНВД;
		
		Блюдо				= Перечисления.ОбщепитВидыНоменклатуры.Блюдо;
		// финиш - 18.03.2020
	КонецЕсли;
	Для каждого Стр из ДокументыРП цикл
		Если ИмяКонфигурации <> "УТ" тогда
			// Тимур - старт - 20.03.2020
			//ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,shift_id,DEVICE_ID",Стр.date,Стр.shift_id,Стр.DEVICE_ID));
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,DEVICE_ID",Стр.date, Стр.DEVICE_ID));
			// финиш - 20.03.2020
			Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
			// Тимур - старт - 20.03.2020
			//Документ = НайтиДокументВБазе(Стр.shift_id,"Отчет о розничных продажах");
			Документ = НайтиДокументВБазе("&&&&&","Отчет о розничных продажах");
			// финиш - 20.03.2020
			Если ЗначениеЗаполнено(Документ) тогда
				Если ЗаменятьДокументы тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Документ розничной продажи от " + Стр.date + " существует!");
					Продолжить;
				КонецЕсли;
			Иначе
				Документ = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			КонецЕсли;		
			
			Документ.Дата = Стр.date;
			Документ.ВидОперации = Перечисления.ВидыОперацийОтчетОРозничныхПродажах.ОтчетККМОПродажах;
			
			Документ.Организация = Организация;	
			
			Документ.СчетКасса = СчетКассы;
			Документ.СуммаВключаетНДС = Истина;
			
			Документ.ВалютаДокумента = Валюта;
			Документ.КратностьДокумента = 1;
			Документ.КурсДокумента = 1;
			
			
			
			Документ.Склад = Таб[0].STOREH_ID;
			
			// Тимур - старт - 18.03.2020
			//Документ.Товары.Очистить();
			//Документ.Оплата.Очистить();
			//Если Метаданные.Версия > "3.0.63.00" тогда
			//	Документ.Возвраты.Очистить();
			//КонецЕсли;
			//Если Метаданные.Версия > "3.0.63.00" тогда
			//	Документ.ВозвратОплаты.Очистить();
			//КонецЕсли;
			Если тОчищатьТЧВОтчетахОРозничныхПродажах Тогда
				Документ.Товары.Очистить();
				Документ.Оплата.Очистить();
				Если Метаданные.Версия > "3.0.63.00" тогда
					Документ.Возвраты.Очистить();
				КонецЕсли;
				Если Метаданные.Версия > "3.0.63.00" тогда
					Документ.ВозвратОплаты.Очистить();
				КонецЕсли;
			КонецЕсли;
			// финиш - 18.03.2020
			
			Для каждого СтрокаМассива из Таб цикл			
				Если Число(СтрокаМассива.ITEM_QTY) < 0 тогда
					Продолжить; 
				КонецЕсли;
				Если СтрокаМассива.OPERATION_TYPE = "Payment" тогда
					СтрокаТЧ = Документ.Товары.Добавить();
				ИначеЕсли СтрокаМассива.OPERATION_TYPE = "Refund" тогда
					Если Метаданные.Версия > "3.0.63.00" тогда
						СтрокаТЧ = Документ.Возвраты.Добавить();
					КонецЕсли;
				Иначе
					Продолжить;
				КонецЕсли;
				// Тимур - старт - 18.03.2020
				ЭтоПродажа	= СтрокаМассива.OPERATION_TYPE = "Payment";
				// финиш - 18.03.2020
				
				Если ЗначениеЗаполнено(СтрокаМассива.ITEM_VARIATION_ID) тогда
					СтрокаТЧ.Номенклатура = СтрокаМассива.ITEM_VARIATION_ID;
					СтрокаТЧ.Количество = Число(СтрокаМассива.ITEM_QTY);
					СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.NDS);
					СтрокаТЧ.Цена = ?(СтрокаМассива.ITEM_DISCOUNT = "0.00",Число(СтрокаМассива.ITEM_SALE_PRICE),Число(СтрокаМассива.ITEM_SALE_PRICE)-(Число(СтрокаМассива.ITEM_DISCOUNT))/Число(СтрокаМассива.ITEM_QTY));
				Иначе                                                                            
					СтрокаТЧ.Номенклатура = Объект.СвободныйТовар;
					СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					СтрокаТЧ.Количество = Число(СтрокаМассива.ITEM_QTY);
					СтрокаТЧ.Цена = ?(СтрокаМассива.ITEM_DISCOUNT = "0.00",Число(СтрокаМассива.ITEM_SALE_PRICE),Число(СтрокаМассива.ITEM_SALE_PRICE)-(Число(СтрокаМассива.ITEM_DISCOUNT))/Число(СтрокаМассива.ITEM_QTY));
				КонецЕсли;
				
				// Тимур - старт - 18.03.2020
				Если ЭтоПродажа Тогда
					СтрокаТЧ.ЕдиницаИзмерения	= Штука;
					СтрокаТЧ.Коэффициент		= 1;
				КонецЕсли;
				// финиш - 18.03.2020
				
				СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
				СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.СуммаВключаетНДС, СтрокаТЧ.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				
				// Тимур - старт - 18.03.2020
				//Счета = СчетаУчетавТЧ(СтрокаТЧ.Номенклатура,Документ.Склад);
				//Если Счета <>  Неопределено тогда
				//	СтрокаТЧ.СчетУчета = Счета.СчетУчета;					
				//	СтрокаТЧ.СчетРасходов = Счета.СчетРасходовОтРеализации;
				//	СтрокаТЧ.СчетДоходов = Счета.СчетДоходовОтРеализации;
				//	СтрокаТЧ.СчетУчетаНДСПоРеализации = Счета.СчетУчетаНДСПоРеализации;
				//	Если СтрокаТЧ.СчетРасходов = ПустойСчет ИЛИ СтрокаТЧ.СчетДоходов = ПустойСчет тогда 
				//		СтрокаТЧ.СчетРасходов = СчетаДоходовРасходовАвтоматически(Документ.Организация,Документ.Дата,Ложь);
				//		СтрокаТЧ.СчетДоходов = СчетаДоходовРасходовАвтоматически(Документ.Организация,Документ.Дата,Истина);
				//	КонецЕсли;
				//	СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
				//Иначе
				//	ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаТЧ.Номенклатура.Наименование);
				//КонецЕсли;
				СтрокаТЧ.СчетУчета		= ?(СтрокаТЧ.Номенклатура.ОбщепитВидНоменклатуры = Блюдо, СчетБлюда, СчетТовар);
				СтрокаТЧ.СчетРасходов	= СчетРасходов;
				СтрокаТЧ.СчетДоходов	= СчетДоходов;
				// финиш - 18.03.2020
			КонецЦикла;
			// Тимур - старт - 18.03.2020
			//СвободныйТоварВТЧ = Документ.Товары.НайтиСтроки(Новый Структура("Цена",0));
			//Если СвободныйТоварВТЧ.Количество() > 0 тогда
			//	СвободныйТоварВТЧ[0].Сумма = Число(СтрокаМассива.TOTAL) - Документ.Товары.Итог("Сумма");
			//	СвободныйТоварВТЧ[0].Цена = СвободныйТоварВТЧ[0].Сумма;
			//	СвободныйТоварВТЧ[0].Количество = 1;
			//КонецЕсли;
			// финиш - 18.03.2020
			// Тимур - старт - 20.03.2020
			//ОплатаНужногоДня = ТЗ.НайтиСтроки(Новый Структура("SHIFT_ID",Стр.SHIFT_ID));
			//ТаблицаОплат = ТЗ.Скопировать(ОплатаНужногоДня);
			ОплатаНужногоДня = ТЗДляРасчетаОплат.НайтиСтроки(Новый Структура("date,DEVICE_ID",Стр.date, Стр.DEVICE_ID));
			ТаблицаОплат = ТЗДляРасчетаОплат.Скопировать(ОплатаНужногоДня);
			// финиш - 20.03.2020
			ТаблицаОплат.Свернуть("NUMBER,PAYMENT_SCRIPT_ID,OPERATION_TYPE,TOTAL");
			НН = ТаблицаОплат.Количество()-1;
			Пока НН >=0 цикл
				Если ТаблицаОплат[НН].NUMBER = "0" тогда
						ТаблицаОплат.Удалить(НН);
						НН = НН - 1;
						Продолжить;
				КонецЕсли;				
				ТаблицаОплат[НН].total = Число(ТаблицаОплат[НН].total);
				НН = НН - 1;
			КонецЦикла;
			ТаблицаОплат.Свернуть("PAYMENT_SCRIPT_ID,OPERATION_TYPE","TOTAL");
			Для каждого СтрОпл из ТаблицаОплат цикл
				СпособОплатыЧека = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",СтрОпл.PAYMENT_SCRIPT_ID));
				Если СпособОплатыЧека.Количество() > 0 тогда
					Если СтрОпл.OPERATION_TYPE = "Payment" тогда
						СтрокаОплаты = Документ.Оплата.Добавить();
						СтрокаОплаты.ВидОплаты = СпособОплатыЧека[0].Объект;
						СтрокаОплаты.СуммаОплаты = Число(СтрОпл.TOTAL);
					ИначеЕсли СтрОпл.OPERATION_TYPE = "Refund" тогда 
						СтрокаОплаты = Документ.ВозвратОплаты.Добавить();
						СтрокаОплаты.ВидОплаты = СпособОплатыЧека[0].Объект;
						СтрокаОплаты.СуммаОплаты = Число(СтрОпл.TOTAL);
					КонецЕсли;			
				КонецЕсли;
			КонецЦикла;
			
			
			Если СтрокаМассива.OPERATION_TYPE = "Payment" тогда
				Документ.СуммаДокумента = Документ.Товары.Итог("Сумма");
			Иначе
				Документ.СуммаДокумента = Документ.Возвраты.Итог("Сумма");
			КонецЕсли; 			
			Документ.Оплата.Свернуть("ВидОплаты","СуммаОплаты");
			Если Документ.Товары.Количество() > 0 ИЛИ Документ.Возвраты.Количество() > 0 тогда
				// Тимур - старт - 20.03.2020
				//ЗаписатьДокумент(Документ,Стр.shift_id,"Отчет о розничных продажах");
				ЗаписатьДокумент(Документ, "", "Отчет о розничных продажах");
				// финиш - 20.03.2020
			КонецЕсли;
			
		Иначе// УТ
			
			Документ = НайтиДокументВБазе(Стр.shift_id,"Отчет о розничных продажах");
			Если ЗначениеЗаполнено(Документ) тогда
				Если ЗаменятьДокументы тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Документ розничной продажи от " + Стр.date +  " существует!");
					Продолжить;
				КонецЕсли;
			Иначе
				Документ = Документы.ОтчетОРозничныхПродажах.СоздатьДокумент();
			КонецЕсли;  			
			
			Документ.Организация = Стр.DEVICE_ID.Владелец;
			Документ.Дата = Стр.date;
			РеквизитыККМ = Справочники.КассыККМ.РеквизитыКассыККМ(Стр.DEVICE_ID);
			Документ.КассаККМ = Стр.DEVICE_ID;
			Документ.Валюта = РеквизитыККМ.Валюта;
			Документ.ЦенаВключаетНДС = РеквизитыККМ.ЦенаВключаетНДС;
			Документ.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
			Если Документ.КассаККМ.Метаданные().Реквизиты.Найти("Подразделение") <> Неопределено Тогда
				Документ.Подразделение	= Документ.КассаККМ.Подразделение;
			КонецЕсли;	
			Документ.Склад = Стр.DEVICE_ID.Склад;
			Документ.НалогообложениеНДС = Справочники.Организации.НалогообложениеНДС(Документ.Организация, Документ.Склад, Документ.Дата);
			Документ.ВидЦены = Документ.Склад.РозничныйВидЦены;	
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,shift_id,DEVICE_ID",Стр.date,Стр.shift_id,Стр.DEVICE_ID));
			Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
			
			Документ.Товары.Очистить();
			Документ.ОплатаПлатежнымиКартами.Очистить();
			
			Для каждого СтрокаМассива из Таб цикл			
				Если СтрокаМассива.OPERATION_TYPE = "Payment" тогда // ИЛИ СтрокаМассива.OPERATION_TYPE = "Refund" тогда
					СтрокаТЧ = Документ.Товары.Добавить();
				Иначе					
					Продолжить;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаМассива.ITEM_VARIATION_ID) тогда
					СтрокаТЧ.Номенклатура = СтрокаМассива.ITEM_VARIATION_ID;
					СтрокаТЧ.Количество = ?(СтрокаМассива.OPERATION_TYPE = "Refund", - Число(СтрокаМассива.ITEM_QTY),  Число(СтрокаМассива.ITEM_QTY));
					СтрокаТЧ.КоличествоУпаковок = ?(СтрокаМассива.OPERATION_TYPE = "Refund", - Число(СтрокаМассива.ITEM_QTY),  Число(СтрокаМассива.ITEM_QTY));
					СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.NDS);			              
					СтрокаТЧ.Цена = ?(СтрокаМассива.ITEM_DISCOUNT = "0.00",Число(СтрокаМассива.ITEM_SALE_PRICE),Число(СтрокаМассива.ITEM_SALE_PRICE)-(Число(СтрокаМассива.ITEM_DISCOUNT))/Число(СтрокаМассива.ITEM_QTY));
				Иначе                                                                            
					СтрокаТЧ.Номенклатура = Объект.СвободныйТовар;
					СтрокаТЧ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
					СтрокаТЧ.Количество = ?(СтрокаМассива.OPERATION_TYPE = "Refund", - Число(СтрокаМассива.ITEM_QTY),  Число(СтрокаМассива.ITEM_QTY));
					СтрокаТЧ.КоличествоУпаковок = ?(СтрокаМассива.OPERATION_TYPE = "Refund", - Число(СтрокаМассива.ITEM_QTY),  Число(СтрокаМассива.ITEM_QTY));
					СтрокаТЧ.Цена = ?(СтрокаМассива.ITEM_DISCOUNT = "0.00",Число(СтрокаМассива.ITEM_SALE_PRICE),Число(СтрокаМассива.ITEM_SALE_PRICE)-(Число(СтрокаМассива.ITEM_DISCOUNT))/Число(СтрокаМассива.ITEM_QTY));
				КонецЕсли;
				
				СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;
				СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.ЦенаВключаетНДС, СтрокаТЧ.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
				СтрокаТЧ.Партнер = справочники.Партнеры.РозничныйПокупатель;
				
				
				
				//КонецЕсли;
			КонецЦикла;
			СвободныйТоварВТЧ = Документ.Товары.НайтиСтроки(Новый Структура("Цена",0));
			Если СвободныйТоварВТЧ.Количество() > 0 тогда
				СвободныйТоварВТЧ[0].Сумма = Число(СтрокаМассива.TOTAL) - Документ.Товары.Итог("Сумма");
				СвободныйТоварВТЧ[0].Цена = СвободныйТоварВТЧ[0].Сумма;
				СвободныйТоварВТЧ[0].Количество = 1;
			КонецЕсли;
			ОплатаНужногоДня = ТЗ.НайтиСтроки(Новый Структура("SHIFT_ID",Стр.SHIFT_ID));
			ТаблицаОплат = ТЗ.Скопировать(ОплатаНужногоДня);
			ТаблицаОплат.Свернуть("NUMBER,PAYMENT_SCRIPT_ID,OPERATION_TYPE,TOTAL");
			НН = ТаблицаОплат.Количество()-1;
			Пока НН >=0 цикл
				Если ТаблицаОплат[НН].NUMBER = "0" тогда
						ТаблицаОплат.Удалить(НН);
						НН = НН - 1;
						Продолжить;
				КонецЕсли;				
				ТаблицаОплат[НН].total = Число(ТаблицаОплат[НН].total);
				НН = НН - 1;
			КонецЦикла;
			ТаблицаОплат.Свернуть("PAYMENT_SCRIPT_ID,OPERATION_TYPE","TOTAL");
			Для каждого СтрОпл из ТаблицаОплат цикл
				СпособОплатыЧека = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",СтрокаМассива.PAYMENT_SCRIPT_ID));
				Если СпособОплатыЧека.Количество() > 0 тогда
					Если СтрокаМассива.OPERATION_TYPE = "Payment" тогда
						СтрокаОплаты = Документ.ОплатаПлатежнымиКартами.Добавить();
						СтрокаОплаты.ЭквайринговыйТерминал = СпособОплатыЧека[0].Объект;//СтрокаМассива.PAYMENT_SCRIPT_ID;
						СтрокаОплаты.Сумма = Число(СтрокаМассива.TOTAL);
						СтрокаОплаты.НомерПлатежнойКарты = "0";
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			Если Документ.Товары.Количество() > 0 тогда
				ЗаписатьДокумент(Документ,Стр.shift_id,"Отчет о розничных продажах");
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	АдресРП = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки,УИДФормы);
КонецПроцедуры

&НаСервере
Функция ПолучитьДату(СтрокаДата)
	Возврат Дата(СтрокаДата + ":00");
КонецФункции

&НаСервере
Процедура КонтрольЕдиницИзмерений(АдресТЗ)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	ТЗЕИ = ТЗ.Скопировать(,"ЕдиницаизмерениякодпоОКЕИ,ЕдиницаИзмеренияНаименование");
	ТЗЕИ.Свернуть("ЕдиницаизмерениякодпоОКЕИ,ЕдиницаИзмеренияНаименование");
	
	Для каждого Стр из ТЗЕИ цикл
		Если Стр.ЕдиницаизмерениякодпоОКЕИ = "" тогда 
			Продолжить;
		КонецЕсли;
		
		Элемент = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Стр.ЕдиницаизмерениякодпоОКЕИ);
		
		Если Элемент = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() тогда 
			Элемент = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
			Элемент.Код = Стр.ЕдиницаизмерениякодпоОКЕИ;
			Элемент.Наименование = Стр.ЕдиницаИзмеренияНаименование;
			Элемент.НаименованиеПолное = Стр.ЕдиницаИзмеренияНаименование;
			Элемент.Записать();
		КонецЕсли;		
	КонецЦикла;	
	
	АдресТЗ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецПроцедуры

&НаСервере
Процедура КонтрольОрганизации(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	ОшибкаОрганизации = ПолучитьИзВременногоХранилища(АдресОшибки);
	ТЗОрганизаций = ТЗ.Скопировать(,"ОрганизацияНаименование,ОрганизацияИНН,ОрганизацияКПП");
	ТЗОрганизаций.Свернуть("ОрганизацияНаименование,ОрганизацияИНН,ОрганизацияКПП");
	
	Для каждого Стр из ТЗОрганизаций цикл
		ОрганизацияФайла = Справочники.Организации.НайтиПоРеквизиту("ИНН",Стр.ОрганизацияИНН);
		Если ОрганизацияФайла = Справочники.Организации.ПустаяСсылка() ИЛИ ОрганизацияФайла = Неопределено тогда			
			СтрокаОшибки = ОшибкаОрганизации.Добавить();
			СтрокаОшибки.ТекстОшибки = Стр.ОрганизацияИНН;
		КонецЕсли;
	КонецЦикла;
	
	АдресТЗ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	АдресОшибки = ПоместитьВоВременноеХранилище(ОшибкаОрганизации,УИДФормы);
КонецПроцедуры

&НаСервере
Процедура ОрганизацияИзДокументаПриИзмененииНаСервере()
	Элементы.Организация.Видимость = НЕ ОрганизацияИзДокумента;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияИзДокументаПриИзменении(Элемент)
	ОрганизацияИзДокументаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьСтавкуНДС(СтавкаНДС)
	
	Попытка
		Если СтавкаНДС = "0" тогда 
			Возврат Перечисления.СтавкиНДС.БезНДС;
		ИначеЕсли СтавкаНДС  = "10" тогда 
			Возврат Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли СтавкаНДС  = "20" тогда 
			Возврат Перечисления.СтавкиНДС.НДС20;
		ИначеЕсли СтавкаНДС = "18" тогда 
			Возврат Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли СтавкаНДС = "-1" тогда 
			Возврат Перечисления.СтавкиНДС.БезНДС
		КонецЕсли;
	Исключение
		Возврат Перечисления.СтавкиНДС.БезНДС;
	КонецПопытки;		
	
КонецФункции

&НаСервере
Процедура ПолучитьСчетаУчета()
	
	ТЗНоменклатура = ПолучитьИзВременногоХранилища(АдресНоменклатуры);
	ТаблицаНоменклатуры = Объект.Номенклатура.Выгрузить(,"Номенклатура1С");
	ТаблицаНоменклатуры.Свернуть("Номенклатура1С");
	
	МассивНоменклатуры	 = Новый Массив();
	МассивНоменклатуры.Добавить(Справочники.Номенклатура.ПустаяСсылка());
	Для каждого Стр из ТаблицаНоменклатуры цикл
		МассивНоменклатуры.Добавить(Стр.Номенклатура1С.Ссылка);
		Родитель = Стр.Номенклатура1С.ПолучитьОбъект();
		Пока Родитель.Уровень() > 0 Цикл
			Родитель = Родитель.Родитель;
			МассивНоменклатуры.Добавить(Родитель.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	ТЗНоменклатура = ЗапроситьСчетаУчета(МассивНоменклатуры);
	АдресНоменклатуры = ПоместитьВоВременноеХранилище(ТЗНоменклатура,УИДФормы);
КонецПроцедуры

&НаСервере
Функция ЗапроситьСчетаУчета(МассивНоменклатуры)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Номенклатура",МассивНоменклатуры);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СчетаУчетаНоменклатуры.Организация КАК Организация,
	|	СчетаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СчетаУчетаНоменклатуры.Склад КАК Склад,
	|	СчетаУчетаНоменклатуры.ТипСклада КАК ТипСклада,
	|	СчетаУчетаНоменклатуры.СчетУчета КАК СчетУчета,
	|	СчетаУчетаНоменклатуры.СчетУчетаПередачи КАК СчетУчетаПередачи,
	|	СчетаУчетаНоменклатуры.СчетДоходовОтРеализации КАК СчетДоходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетРасходовОтРеализации КАК СчетРасходовОтРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоПриобретеннымЦенностям КАК СчетУчетаНДСПоПриобретеннымЦенностям,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСПоРеализации КАК СчетУчетаНДСПоРеализации,
	|	СчетаУчетаНоменклатуры.СчетУчетаНДСУплаченногоНаТаможне КАК СчетУчетаНДСУплаченногоНаТаможне,
	|	СчетаУчетаНоменклатуры.Субконто1 КАК Субконто1,
	|	СчетаУчетаНоменклатуры.Субконто2 КАК Субконто2,
	|	СчетаУчетаНоменклатуры.Субконто3 КАК Субконто3
	|ИЗ
	|	РегистрСведений.СчетаУчетаНоменклатуры КАК СчетаУчетаНоменклатуры
	|	
	|ГДЕ
	|	СчетаУчетаНоменклатуры.Номенклатура В (&Номенклатура)";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СчетаУчетаВТЧ(Номенклатура,Склад)
	ТаблицаСчетов = ПолучитьИзВременногоХранилища(АдресНоменклатуры);
	
	Счета =  ТаблицаСчетов.НайтиСтроки(Новый Структура("Номенклатура,Склад",Номенклатура,Склад));
	
	Если Счета.Количество()>0 тогда	
		Возврат Счета[0];
	Иначе
		Счета =  ТаблицаСчетов.Найти(Номенклатура,"Номенклатура");
		Если Счета <> Неопределено тогда
			Возврат Счета;
		КОнецЕсли;		
	КонецЕсли;
	
	Родитель = Номенклатура.ПолучитьОбъект();
	
	Пока Родитель.Уровень() > 0 Цикл
		Родитель = Родитель.Родитель;
		Счета =  ТаблицаСчетов.НайтиСтроки(Новый Структура("Номенклатура,Склад",Номенклатура,Склад));
		Если Счета.Количество()>0 тогда	
			Возврат Счета[0];
		Иначе
			Счета =  ТаблицаСчетов.Найти(Родитель,"Номенклатура");
			Если Счета <> Неопределено тогда 
				Возврат Счета;
			КОнецЕсли; 			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр из ТаблицаСчетов цикл   
		Если не ЗначениеЗаполнено(Стр.Номенклатура) Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Устанавливает время согластно хронологии
&НаСервере
Процедура УстановитьВремяПоУмолчанию(Источник,ВремяДокумента)
	
	ТекущаяДата = НачалоДня(Источник.Дата);
	Источник.Дата  = ТекущаяДата + ВремяДокумента.Часы * 3600 + ВремяДокумента.Минуты * 60
	+ ?(ВремяДокумента.Свойство("Секунды"), ВремяДокумента.Секунды, 0);
	
КонецПроцедуры

&НаСервере
Функция СчетаДоходовРасходовАвтоматически(ОрганизацияДляПоиска,Дата,Доход)
	
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(ОрганизацияДляПоиска,Дата);
	
	Если ПрименяетсяОсобыйПорядокНалогообложения <> Неопределено тогда 
		Если ПрименяетсяОсобыйПорядокНалогообложения тогда
			Если Доход тогда
				Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
			Иначе
				Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.2");
			КонецЕсли;
		Иначе
			Если Доход тогда
				Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.1");
			Иначе
				Возврат ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.02.1");
			КонецЕсли;
		КонецЕсли;		
	Иначе
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьКонтрагентов(АдресТЗ)
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	Для каждого Стр из ТЗ Цикл
		Если Объект.Контрагенты.НайтиСтроки(Новый Структура("КодСимпл",Стр.КонтрагентКод)).Количество() = 0 И Стр.КонтрагентКод <> "" тогда
			Строка = Объект.Контрагенты.Добавить();
			Строка.КодСимпл = Стр.КонтрагентКод;
			Строка.НаименованиеСимпл = Стр.КонтрагентНаименование;
			Строка.КонтрагентИНН = Стр.КонтрагентИНН;
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТЗ,АдресТЗ);	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатьиЗатрат(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	Для каждого стр из ТЗ цикл
		Если Объект.СтатьиДДС.НайтиСтроки(Новый Структура("КодСИМПЛ",Стр.СтатьяКод)).Количество() = 0 И Стр.СтатьяКод <> "" тогда  
			Строка = Объект.СтатьиДДС.Добавить();
			Строка.КодСИМПЛ = Стр.СтатьяКод;
			Строка.НаименованиеСИМПЛ = Стр.СтатьяНаименование;
		КонецЕсли;		
	КонецЦикла;
	АдресТЗ = ПоместитьВоВременноеХранилище(ТЗ);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПН()
		
	УТ = Найти(Метаданные.Представление(),"Управление торговлей") > 0;
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресПН);
	ТЗПромежуточная = ТЗ.Скопировать();
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Date = ПолучитьДату(Стр.Date);
		Если Стр.PRODUCT_CODE <> "" тогда
			Стр.PRODUCT_CODE = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ДопЗначение1,ТипОбъекта",Стр.PRODUCT_CODE,"Номенклатура"))[0].Объект;
			Стр.UNIT_ID = Стр.PRODUCT_CODE.ЕдиницаИзмерения;			 
		Иначе
		КонецЕсли;
		Стр.STOREH_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.STOREH_ID))[0].Объект;
		Если Стр.SUPPLIER_ID <> "" тогда 
			Стр.SUPPLIER_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.SUPPLIER_ID))[0].Объект;
		КонецЕсли;
	КонецЦикла;
	
	ДокументыПН = ТЗПромежуточная.Скопировать();
	ДокументыПН.Свернуть("id,date,number,SUPPLIER_ID,STOREH_ID");
	ДокументыПН.Сортировать("date");
	Если НЕ УТ тогда
		Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетРасчетаСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
		СчетРасчетаАванс = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
	КонецЕсли;
	
	Для каждого Стр из ДокументыПН цикл
		Если НЕ УТ тогда
			Если Стр.SUPPLIER_ID <> "" тогда
				Документ = НайтиДокументВБазе(Стр.id,"Поступление товаров и услуг");
				Если не ЗначениеЗаполнено(Документ) Тогда
					Документ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
				Иначе
					Если ЗаменятьДокументы Тогда
						Документ = Документ.ПолучитьОбъект();
						Документ.УстановитьПометкуУдаления(Ложь);
						Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДобавитьЛог("Накладная № "+ Стр.number + " от " + Стр.date + " существует!");
						Продолжить
					КОнецЕсли;
				КонецЕсли;
				
				Документ.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
				Документ.Дата = Стр.date;		
				
				Документ.Организация = Организация;
								
				Документ.ВалютаДокумента = Валюта;
				Документ.КурсВзаиморасчетов = 1;
				Документ.КратностьВзаиморасчетов = 1;
				Документ.СуммаВключаетНДС = Истина;
				Документ.НДСВключенВСтоимость = Истина;
				Документ.Контрагент = Стр.SUPPLIER_ID;  			
				Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;						
				Документ.ДоговорКонтрагента = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("Объект",Стр.SUPPLIER_ID))[0].ДопЗначение1;		
				Документ.НомерВходящегоДокумента = Стр.number;
				Документ.Грузоотправитель = Документ.Контрагент;
				Документ.СчетУчетаРасчетовСКонтрагентом = СчетРасчетаСКонтрагентом;
				Документ.СчетУчетаРасчетовПоАвансам = СчетРасчетаАванс;
				Документ.Склад = Стр.STOREH_ID;
				Документ.ПодразделениеОрганизации = Документ.Склад.ПодразделениеОрганизации;
				
				
				Документ.Товары.Очистить();
				Документ.Услуги.Очистить();
				
				ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,number,STOREH_ID",Стр.date,Стр.number,Стр.STOREH_ID));
				Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
				Для каждого СтрокаМассива из Таб цикл
					
					Если  СтрокаМассива.PRODUCT_CODE.Услуга тогда
						СтрокаТЧ = Документ.Услуги.Добавить();
					Иначе
						СтрокаТЧ = Документ.Товары.Добавить();
					КонецЕсли;
					СтрокаТЧ.Номенклатура = СтрокаМассива.PRODUCT_CODE;
					
					СтрокаТЧ.Количество = Число(СтрокаМассива.QTY);
					СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.NDS);			
					СтрокаТЧ.Цена = Число(СтрокаМассива.PRICE);			
					СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					
					СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;;
					СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.СуммаВключаетНДС, СтрокаТЧ.СтавкаНДС);
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
					Счета = СчетаУчетавТЧ(СтрокаТЧ.Номенклатура,Документ.Склад);
					Если Счета <>  Неопределено тогда
						Если НЕ СтрокаТЧ.Номенклатура.Услуга тогда 
							СтрокаТЧ.СчетУчета = Счета.СчетУчета;
						Иначе
							СтрокаТЧ.Содержание = СтрокаТЧ.Номенклатура.НаименованиеПолное;
							СтрокаТЧ.СчетЗатрат = Счета.СчетУчета;
							СтрокаТЧ.Субконто1 = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
							СтрокаТЧ.Субконто2 = СтрокаТЧ.Номенклатура.СтатьяЗатрат;					
							СтрокаТЧ.СчетЗатратНУ = Счета.СчетУчета;
						КонецЕсли;
						СтрокаТЧ.СчетУчетаНДС = Счета.СчетУчетаНДСПоПриобретеннымЦенностям;
					Иначе
						ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаТЧ.Номенклатура.Наименование);
					КонецЕсли;
					
				КонецЦикла;
				
				ЗаписатьДокумент(Документ,Стр.id,"Поступление товаров и услуг");
			Иначе
				Документ = НайтиДокументВБазе(Стр.id,"Оприходование товаров");
				Если не ЗначениеЗаполнено(Документ) Тогда
					Документ = Документы.ОприходованиеТоваров.СоздатьДокумент();
				Иначе
					Если ЗаменятьДокументы Тогда
						Документ = Документ.ПолучитьОбъект();
						Документ.УстановитьПометкуУдаления(Ложь);
						Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДобавитьЛог("Оприходование товаров № "+ Стр.number + " от " + Стр.date + " существует!");
						Продолжить
					КОнецЕсли;
				КонецЕсли;
				
				Документ.Дата = Стр.date;		
				Документ.Организация = Организация;
				Документ.Склад = Стр.STOREH_ID;
				Документ.ПодразделениеОрганизации = Документ.Склад.ПодразделениеОрганизации;
				Документ.СтатьяПрочихДоходовРасходов = СтатьяПрочихДоходовРасходов;
				Документ.ТипЦен = Справочники.ТипыЦенНоменклатуры.НайтиПоНаименованию("Закупочные");
				Документ.Товары.Очистить();
				
				ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,number,STOREH_ID",Стр.date,Стр.number,Стр.STOREH_ID));
				Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
				Для каждого СтрокаМассива из Таб цикл
					
					Если  СтрокаМассива.PRODUCT_CODE.Услуга тогда
						СтрокаТЧ = Документ.Услуги.Добавить();
					Иначе
						СтрокаТЧ = Документ.Товары.Добавить();
					КонецЕсли;
					СтрокаТЧ.Номенклатура = СтрокаМассива.PRODUCT_CODE;
					
					СтрокаТЧ.Количество = Число(СтрокаМассива.QTY);
					СтрокаТЧ.Цена = Число(СтрокаМассива.PRICE);			
					СтрокаТЧ.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
					
					СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;				
					Счета = СчетаУчетавТЧ(СтрокаТЧ.Номенклатура,Документ.Склад);
					Если Счета <>  Неопределено тогда
						Если НЕ СтрокаТЧ.Номенклатура.Услуга тогда 
							СтрокаТЧ.СчетУчета = Счета.СчетУчета;
						Иначе
							СтрокаТЧ.Содержание = СтрокаТЧ.Номенклатура.НаименованиеПолное;
							СтрокаТЧ.СчетЗатрат = Счета.СчетУчета;
							СтрокаТЧ.Субконто1 = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
							СтрокаТЧ.Субконто2 = СтрокаТЧ.Номенклатура.СтатьяЗатрат;					
							СтрокаТЧ.СчетЗатратНУ = Счета.СчетУчета;
						КонецЕсли;					
					Иначе
						ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаТЧ.Номенклатура.Наименование);
					КонецЕсли;				
				КонецЦикла;
				
				ЗаписатьДокумент(Документ,Стр.id,"Оприходование товаров");
				
			КонецЕсли;
		Иначе // Управление торговлей
			Если Стр.SUPPLIER_ID <> "" тогда				
				Документ = НайтиДокументВБазе(Стр.id,"Поступление товаров и услуг");
				Если не ЗначениеЗаполнено(Документ) Тогда
					Если Метаданные.Документы.Найти("ПриобретениеТоваровУслуг") = Неопределено Тогда
						Документ = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
					Иначе
						// УТ 11.4
						Документ = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
					КонецЕсли;
				Иначе
					Если ЗаменятьДокументы Тогда
						Документ = Документ.ПолучитьОбъект();
						Документ.УстановитьПометкуУдаления(Ложь);
						Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДобавитьЛог("Накладная № "+ Стр.number + " от " + Стр.date + " существует!");
						Продолжить
					КОнецЕсли;
				КонецЕсли;
				
				Документ.Дата 			= Стр.date;				
				Документ.ХозяйственнаяОперация		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
				Документ.Организация = Организация;// Тут подправить
				Документ.Контрагент = Стр.SUPPLIER_ID;
				Документ.Договор = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("Объект",Документ.Контрагент))[0].ДопЗначение1;
				Документ.Склад  		= Стр.STOREH_ID;
				Документ.Партнер		= Стр.SUPPLIER_ID.Партнер;
				Документ.Автор			= ПараметрыСеанса.ТекущийПользователь;
				Документ.Валюта		= Константы.ВалютаРегламентированногоУчета.Получить();
				Документ.ВалютаВзаиморасчетов = Документ.Валюта;				
				Документ.ЦенаВключаетНДС = Истина;				
				Документ.Грузоотправитель = Документ.Контрагент;
				Документ.Подразделение = Склад.Подразделение;
				Документ.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
				Документ.Курс = 1;
				Документ.Кратность = 1;
				Документ.ПорядокОплаты = Перечисления.ПорядокОплатыПоСоглашениям.РасчетыВРубляхОплатаВРублях;				
				Документ.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
				Документ.ЗакупкаПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПоФактическомуИспользованию;
				Документ.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.НеРазделенаПоНакладным;
				Документ.Товары.Очистить();				
				
				ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,number,STOREH_ID",Стр.date,Стр.number,Стр.STOREH_ID));
				Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
				Для каждого СтрокаМассива из Таб цикл
					СтрокаТЧ = Документ.Товары.Добавить();					
					СтрокаТЧ.Номенклатура = СтрокаМассива.PRODUCT_CODE;					
					СтрокаТЧ.Количество = Число(СтрокаМассива.QTY);
					СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
					СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.NDS);			
					СтрокаТЧ.Цена = Число(СтрокаМассива.PRICE);			
					СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;;
					СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.ЦенаВключаетНДС, СтрокаТЧ.СтавкаНДС);
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.ЦенаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);
					СтрокаТЧ.СуммаСНДС = СтрокаТЧ.Сумма;
					СтрокаТЧ.СуммаВзаиморасчетов = СтрокаТЧ.Сумма;
					СтрокаТЧ.Склад = Документ.Склад;
				КонецЦикла;
				Документ.СуммаВзаиморасчетов = Документ.Товары.Итог("СуммаВзаиморасчетов");
				Документ.СуммаВзаиморасчетовПоЗаказу = Документ.СуммаВзаиморасчетов;
				Документ.СуммаДокумента = Документ.СуммаВзаиморасчетов;
				ЗаписатьДокумент(Документ,Стр.id,"Поступление товаров и услуг"); 				
			Иначе  //Оприходование				
				Документ = НайтиДокументВБазе(Стр.id,"Оприходование товаров");
				Если не ЗначениеЗаполнено(Документ) Тогда
					Документ = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
				Иначе
					Если ЗаменятьДокументы Тогда
						Документ = Документ.ПолучитьОбъект();
						Документ.УстановитьПометкуУдаления(Ложь);
						Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						ДобавитьЛог("Оприходование товаров № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
						Продолжить;
					КонецЕсли;
				КонецЕсли;	
				Документ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
				Документ.Организация = Организация;
				Документ.СтатьяДоходов = СтатьяПрочихДоходовРасходов;
				Документ.Склад = Стр.STOREH_ID;
				Документ.ВидЦены = Документ.Склад.УчетныйВидЦены;
				Документ.Подразделение = Документ.Склад.Подразделение;
				Документ.АналитикаДоходов = Документ.Подразделение;
				Документ.Дата = Стр.date;				
				Документ.Товары.Очистить();
				
				ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,number,STOREH_ID",Стр.date,Стр.number,Стр.STOREH_ID));
				Таб = ТЗПромежуточная.Скопировать(ТабЧасть);
				Для каждого СтрокаМассива из Таб цикл
					СтрокаТЧ = Документ.Товары.Добавить();					
					СтрокаТЧ.Номенклатура = СтрокаМассива.PRODUCT_CODE;					
					СтрокаТЧ.Количество = Число(СтрокаМассива.QTY);								
					СтрокаТЧ.Цена = Число(СтрокаМассива.PRICE);			
					СтрокаТЧ.Сумма = СтрокаТЧ.Количество * СтрокаТЧ.Цена;					
				КонецЦикла;
				ЗаписатьДокумент(Документ,Стр.id,"Оприходование товаров");
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	
	АдресПН = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокуменыОТ()
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресОТ);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Если Стр.НоменклатураНаименование <> "" тогда
			Стр.НоменклатураНаименование = Объект.Номенклатура.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.НоменклатураНаименование))[0].Номенклатура1С;
			Стр.ЕдиницаИзмеренияНаименование = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Стр.ЕдиницаизмерениякодпоОКЕИ);			 
			Стр.ТипТовараНаименование = Объект.ТипыНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.ТипТовараНаименование))[0].ТипНоменклатуры1С;			
		КонецЕсли;
		Стр.ВозвратПоставщику = ПолучитьБулево(Стр.ВозвратПоставщику);
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
		Стр.КонтрагентНаименование = Объект.Контрагенты.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КонтрагентНаименование))[0].Контрагент1С;
		
	КонецЦикла;
	
	ДокументыОТ = ТЗПромежуточная.Скопировать();
	ДокументыОТ.Свернуть("ИДдокумента,Дата,Номер,ВозвратПоставщику,ОрганизацияНаименование,КонтрагентНаименование,Комментарий,ОрганизацияИНН,Проведен");
	ДокументыОТ.Сортировать("Дата"); 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	СчетРасчетаСКонтрагентом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
	СчетРасчетаАванс = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");
	СчетРасчетаПоПретензиям = ПланыСчетов.Хозрасчетный.НайтиПоКоду("76.02");
	Для каждого Стр из ДокументыОТ цикл
		Если Стр.ВозвратПоставщику тогда			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Возврат товаров поставщику");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ВозвратТоваровПоставщику.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Отгрузка № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КонецЕсли;				  
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ПокупкаКомиссия;
			Документ.Дата = Стр.Дата;			
			
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			
			Документ.ВалютаДокумента = Валюта;
			Документ.КурсВзаиморасчетов = 1;
			Документ.КратностьВзаиморасчетов = 1;
			Документ.СуммаВключаетНДС = Истина;
			Документ.Контрагент = Стр.КонтрагентНаименование;  			
			Документ.ДоговорКонтрагента = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Документ.Контрагент))[0].Договор;
			Документ.СчетУчетаРасчетовСКонтрагентом = СчетРасчетаСКонтрагентом;
			Документ.СчетУчетаРасчетовПоПретензиям = СчетРасчетаПоПретензиям;
			Документ.Склад = Склад;
			Документ.ПодразделениеОрганизации = Склад.ПодразделениеОрганизации;
			Документ.Комментарий = Стр.Комментарий;
			
			Документ.Товары.Очистить();
			
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("Дата,Номер,ОрганизацияИНН",Стр.Дата,Стр.Номер,Стр.ОрганизацияИНН));
		
			Для каждого СтрокаМассива из ТабЧасть цикл 				
				СтрокаТЧ = Документ.Товары.Добавить();				
				СтрокаТЧ.Номенклатура = СтрокаМассива.НоменклатураНаименование;
				СтрокаТЧ.Количество = Число(СтрокаМассива.Количество);
				СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаМассива.СуммаСНДС;
				СтрокаТЧ.Цена = СтрокаМассива.ЦенаСНДС;
				СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.СуммаВключаетНДС, СтрокаТЧ.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);				  
				
				Счета = СчетаУчетавТЧ(СтрокаТЧ.Номенклатура,Документ.Склад);
				Если Счета <>  Неопределено тогда
					СтрокаТЧ.СчетУчета = Счета.СчетУчета;					
					СтрокаТЧ.СчетУчетаНДС = Счета.СчетУчетаНДСПоПриобретеннымЦенностям;
				Иначе
					ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаТЧ.Номенклатура.Наименование);
				КонецЕсли;				  
			КонецЦикла;
			
			ВремяДокумента = Документы.ВозвратТоваровПоставщику.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
			
			ВремяДокумента = документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
			ЗаписатьДокумент(Документ,Стр.ИДдокумента,"Возврат товаров поставщику");
			
		Иначе
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Реализация товаров (услуг)");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Отгрузка № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КонецЕсли;				  
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ПродажаКомиссия;
			Документ.Дата = Стр.Дата;			
			
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			
			Документ.ВалютаДокумента = Валюта;
			Документ.КурсВзаиморасчетов = 1;
			документ.КратностьВзаиморасчетов = 1;
			Документ.СуммаВключаетНДС = Истина;
			Документ.Контрагент = Стр.КонтрагентНаименование;  			
			Документ.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
			Документ.ДоговорКонтрагента = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Документ.Контрагент))[0].Договор;
			Документ.СчетУчетаРасчетовСКонтрагентом = СчетРасчетаСКонтрагентом;
			Документ.СчетУчетаРасчетовПоАвансам = СчетРасчетаАванс;
			Документ.Склад = Склад;
			Документ.ПодразделениеОрганизации = Склад.ПодразделениеОрганизации;
			Документ.Комментарий = Стр.Комментарий;
			
			Документ.Товары.Очистить();
			Документ.Услуги.Очистить();
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("Дата,Номер,ОрганизацияИНН",Стр.Дата,Стр.Номер,Стр.ОрганизацияИНН));
			
			Для каждого СтрокаМассива из ТабЧасть цикл
				Если СтрокаМассива.НоменклатураНаименование = "" тогда
					Если Объект.СвободныйТовар.Услуга тогда
						СтрокаТЧ = Документ.Услуги.Добавить();
					Иначе
						СтрокаТЧ = Документ.Товары.Добавить();
					КонецЕсли;
					СтрокаТЧ.Номенклатура = Объект.СвободныйТовар;					;
				Иначе					
					Если  СтрокаМассива.НоменклатураНаименование.Услуга тогда
						СтрокаТЧ = Документ.Услуги.Добавить();
					Иначе
						СтрокаТЧ = Документ.Товары.Добавить();
					КонецЕсли;
					СтрокаТЧ.Номенклатура = СтрокаМассива.НоменклатураНаименование;
				КонецЕсли;				
				СтрокаТЧ.Количество = Число(СтрокаМассива.Количество);
				СтрокаТЧ.СтавкаНДС = ПолучитьСтавкуНДС(СтрокаМассива.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаМассива.СуммаСНДС;
				СтрокаТЧ.Цена = СтрокаМассива.ЦенаСНДС;
				СтрокаТЧ.СуммаНДС = РассчитатьСуммуНДСТабЧасти(СтрокаТЧ.Сумма, Документ.СуммаВключаетНДС, СтрокаТЧ.СтавкаНДС);
				СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Документ.СуммаВключаетНДС, 0, СтрокаТЧ.СуммаНДС);				  
				
				Счета = СчетаУчетавТЧ(СтрокаТЧ.Номенклатура,Документ.Склад);
				Если Счета <>  Неопределено тогда
					Если НЕ СтрокаТЧ.Номенклатура.Услуга тогда
						СтрокаТЧ.СчетУчета = Счета.СчетУчета;
					КонецЕсли;
					СтрокаТЧ.СчетРасходов = Счета.СчетРасходовОтРеализации;
					СтрокаТЧ.СчетДоходов = Счета.СчетДоходовОтРеализации;
					СтрокаТЧ.СчетУчетаНДСПоРеализации = Счета.СчетУчетаНДСПоРеализации;
					Если СтрокаТЧ.СчетРасходов = ПустойСчет ИЛИ СтрокаТЧ.СчетДоходов = ПустойСчет тогда 
						СтрокаТЧ.СчетРасходов = СчетаДоходовРасходовАвтоматически(Документ.Организация,Документ.Дата,Истина);
						СтрокаТЧ.СчетДоходов = СчетаДоходовРасходовАвтоматически(Документ.Организация,Документ.Дата,Ложь);
					КонецЕсли;
					СтрокаТЧ.Субконто = СтрокаТЧ.Номенклатура.НоменклатурнаяГруппа;
				Иначе
					ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаТЧ.Номенклатура.Наименование);
				КонецЕсли;				  
			КонецЦикла;
			
			ВремяДокумента = Документы.РеализацияТоваровУслуг.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);		
			ЗаписатьДокумент(Документ,Стр.ИДдокумента,"Реализация товаров (услуг)");			  
		КонецЕсли;		  
	КонецЦикла;
	
	АдресОТ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецПроцедуры

&наСервере
Функция ПолучитьБулево(Значение) 	  
	
	Если ВРег(Значение) = ВРег("true") тогда
		Значение = Истина;
		Возврат Значение;
	Иначе
		Значение = Ложь;
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСотрудников(АдресТЗ)
	ТЗ = ПолучитьИзВременногоХранилища(АдресТЗ);
	
	Для каждого Стр из ТЗ Цикл
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("КодСимпл",Стр.СотрудникКод)).Количество() = 0 И Стр.СотрудникКод <> "" тогда
			Строка = Объект.Сотрудники.Добавить();
			Строка.КодСимпл = Стр.СотрудникКод;
			Строка.НаименованиеСимпл = Стр.СотрудникНаименование;
		Иначе
			Продолжить;
		КонецЕсли;			
	КонецЦикла;
	
	АдресТЗ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);	  
КонецФункции

&НаСервере
Процедура СоздатьДокументыПКО()
	ТЗ = ПолучитьИзВременногоХранилища(АдресПКО);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
		Если Стр.КонтрагентНаименование <> "" тогда
			Стр.КонтрагентНаименование = Объект.Контрагенты.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КонтрагентНаименование))[0].Контрагент1С;
		КонецЕсли;
		Если Стр.СотрудникНаименование <> "" тогда 
			Стр.СотрудникНаименование = Объект.Сотрудники.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.СотрудникНаименование))[0].Сотрудник1С;
		КонецЕсли;
		Если Стр.КассаНаименование <> "" тогда
			Стр.КассаНаименование = Объект.Кассы.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КассаНаименование))[0].Касса1С;	 
		КонецЕсли;
		Если Стр.СтатьяНаименование <> "" тогда 
			Стр.СтатьяНаименование = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("КодСИМПЛ",Стр.СтатьяКод))[0].СтатьяЗатрат1С;
		КонецЕсли;		
		Стр.РозничнаяВыручка = ПолучитьБулево(Стр.РозничнаяВыручка);
		
	КонецЦикла;
	                                                
	ДокументыПКО = ТЗПромежуточная.Скопировать();
	ДокументыПКО.Свернуть("СотрудникНаименование,СтатьяНаименование,ИДдокумента,Дата,Номер,ОрганизацияНаименование,Сумма,КассаНаименование,КонтрагентНаименование,Комментарий,РозничнаяВыручка,ОрганизацияИНН,Проведен");
	ДокументыПКО.Сортировать("Дата"); 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетРасчетаСРозницей = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
	СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
	СчетРасчетовСКонтрагетом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	СчетРасчетовАванс = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	
	Для каждого Стр из ДокументыПКО цикл
		Если Стр.РозничнаяВыручка тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"ПКО");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("ПКО № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийПКО.РозничнаяВыручка;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.Контрагент = Стр.КассаНаименование;
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма); 
			Документ.СчетКасса = СчетКасса;
			Документ.СчетУчетаРасчетовСКонтрагентом = СчетРасчетаСРозницей;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Документ.ПринятоОт = "Частное лицо";
			Документ.СтавкаНДС = СтавкаНДС;
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;							
			Если Документ.СуммаДокумента > 0 тогда
				ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"ПКО");		 
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Стр.КонтрагентНаименование) тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"ПКО");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("ПКО № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма); 
			Документ.СчетКасса = СчетКасса;
			Документ.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Если ЗначениеЗаполнено(Стр.КонтрагентНаименование) тогда
				Документ.Контрагент = Стр.КонтрагентНаименование;
				Документ.ДоговорКонтрагента = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Стр.КонтрагентНаименование))[0].Договор;
			КонецЕсли;
			Документ.ПринятоОт = "Частное лицо";
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Строка.СчетУчетаРасчетовПоАвансам = СчетРасчетовАванс;
			Строка.ДоговорКонтрагента = Документ.ДоговорКонтрагента;
			
			Если Документ.СуммаДокумента > 0 тогда
				ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"ПКО");		 
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Стр.СотрудникНаименование) тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"ПКО");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("ПКО № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма); 
			Документ.СчетКасса = СчетКасса;
			Документ.Контрагент = Стр.СотрудникНаименование.ФизическоеЛицо;
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Строка.СчетУчетаРасчетовПоАвансам = СчетРасчетовАванс;
			
			Если Документ.СуммаДокумента > 0 тогда
				ВремяДокумента = Документы.ПриходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"ПКО");		 
			КонецЕсли;
		КонецЕсли;		 
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыБП()
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресБП);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
		Если Стр.КонтрагентНаименование <> "" тогда
			Стр.КонтрагентНаименование = Объект.Контрагенты.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КонтрагентНаименование))[0].Контрагент1С;
		КонецЕсли;
		Если Стр.СотрудникНаименование <> "" тогда 
			Стр.СотрудникНаименование = Объект.Сотрудники.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.СотрудникНаименование))[0].Сотрудник1С;
		КонецЕсли;
		Если Стр.КассаНаименование <> "" тогда
			Стр.КассаНаименование = Объект.Кассы.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КассаНаименование))[0].Касса1С;	 
		КонецЕсли;
		Если Стр.СтатьяНаименование <> "" тогда 
			Стр.СтатьяНаименование = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("КодСИМПЛ",Стр.СтатьяКод))[0].СтатьяЗатрат1С;
		КонецЕсли;
		Стр.РозничнаяВыручка = ПолучитьБулево(Стр.РозничнаяВыручка);
	КонецЦикла;
	
	ДокументыБП = ТЗПромежуточная.Скопировать();
	ДокументыБП.Свернуть("ИДдокумента,Дата,СтатьяНаименование,Номер,ОрганизацияНаименование,Сумма,КассаНаименование,КонтрагентНаименование,Комментарий,РозничнаяВыручка,ОрганизацияИНН,Проведен,СотрудникНаименование");
	ДокументыБП.Сортировать("Дата"); 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетРасчетаСРозницей = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
	СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("57.03");
	СчетРасчетовСКонтрагетом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.01");
	СчетРасчетовАванс = ПланыСчетов.Хозрасчетный.НайтиПоКоду("62.02");
	
	Для каждого Стр из ДокументыБП цикл
		Если Стр.РозничнаяВыручка тогда
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Оплата платежной картой");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Оплата платежной картой № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			Документ.Дата = Стр.Дата;			
			Документ.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка;
			
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.ВидОплаты = БезналичнаяОплата;
			Документ.ВалютаДокумента = Валюта;
			Документ.Контрагент = Стр.КассаНаименование;
			Документ.Эквайер = БезналичнаяОплата.Контрагент;
			Документ.ДоговорЭквайринга = БезналичнаяОплата.ДоговорКонтрагента;
			Документ.СчетКасса = СчетКасса;
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СуммаДокумента = Число(Стр.Сумма);
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;			
			Строка.КратностьВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;			
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Строка.СчетУчетаРасчетовПоАвансам = СчетРасчетовАванс;
			
			Если Документ.СуммаДокумента > 0 тогда
				ВремяДокумента = документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);			
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"Оплата платежной картой");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Стр.КОнтрагентНаименование) тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Оплата платежной картой");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Оплата платежной картой № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Если ЗначениеЗаполнено(Стр.КонтрагентНаименование) тогда
				Документ.Контрагент = Стр.КонтрагентНаименование;
			КонецЕсли;			 
			Документ.Эквайер = БезналичнаяОплата.Контрагент;
			Документ.ДоговорЭквайринга = БезналичнаяОплата.ДоговорКонтрагента;
			Документ.СчетКасса = СчетКасса;
			Документ.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Документ.СуммаДокумента = Число(Стр.Сумма);
			Документ.ВидОплаты = БезналичнаяОплата; 
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;
			Строка.КратностьВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			Строка.СуммаНДС = 0;
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Строка.СчетУчетаРасчетовПоАвансам = СчетРасчетовАванс;
			Строка.СуммаВзаиморасчетов = Строка.СуммаПлатежа;
			Если ЗначениеЗаполнено(Стр.КОнтрагентНаименование) тогда
				Строка.ДоговорКонтрагента = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Стр.КонтрагентНаименование))[0].Договор;
			КонецЕсли;
			
			Если Документ.СуммаДокумента > 0 тогда
				ВремяДокумента = документы.ОплатаПлатежнойКартой.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);			
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"Оплата платежной картой");
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Стр.СотрудникНаименование) тогда
			// В разработке
		КонецЕсли;
	КонецЦикла;
	
	АдресБП = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);	 
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыРКО()
	ТЗ = ПолучитьИзВременногоХранилища(АдресРКО);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
		Если Стр.КонтрагентНаименование <> "" тогда
			Стр.КонтрагентНаименование = Объект.Контрагенты.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КонтрагентНаименование))[0].Контрагент1С;
		КонецЕсли;
		Если Стр.СотрудникНаименование <> "" тогда 
			Стр.СотрудникНаименование = Объект.Сотрудники.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.СотрудникНаименование))[0].Сотрудник1С;
		КонецЕсли;
		Если Стр.СтатьяНаименование <> "" тогда 
			Стр.СтатьяНаименование = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("КодСИМПЛ",Стр.СтатьяКод))[0].СтатьяЗатрат1С;
		КонецЕсли;
	КонецЦикла;
	
	ДокументыРКО = ТЗПромежуточная.Скопировать();
	ДокументыРКО.Свернуть("ИДдокумента,Дата,СтатьяНаименование,Номер,ОрганизацияНаименование,Сумма,КонтрагентНаименование,Комментарий,ОрганизацияИНН,Проведен,СотрудникНаименование");
	ДокументыРКО.Сортировать("Дата"); 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	СчетРасчетаСРозницей = ПланыСчетов.Хозрасчетный.НайтиПоКоду("90.01.2");
	СчетКасса = ПланыСчетов.Хозрасчетный.НайтиПоКоду("50.01");
	СчетРасчетовСКонтрагетом = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.01");
	СчетРасчетовАванс = ПланыСчетов.Хозрасчетный.НайтиПоКоду("60.02");	
	
	Для каждого Стр из ДокументыРКО цикл
		Если ЗначениеЗаполнено(Стр.КонтрагентНаименование) тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"РКО");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("РКО № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма);
			Документ.Контрагент = Стр.КонтрагентНаименование;
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СчетКасса = СчетКасса;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СуммаВзаиморасчетов = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			Строка.СчетУчетаРасчетовПоАвансам = СчетРасчетовАванс;
			Строка.ДоговорКонтрагента = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Стр.КонтрагентНаименование))[0].Договор;
			
			Если Документ.СуммаДокумента > 0 тогда 
				ВремяДокумента = Документы.РасходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"РКО");			 
			КонецЕсли;
		Иначе
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"РКО");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("РКО № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить
				КОнецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаПодотчетномуЛицу;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма);
			Документ.Контрагент = Стр.СотрудникНаименование.ФизическоеЛицо;
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СчетКасса = СчетКасса;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			
			Документ.РасшифровкаПлатежа.Очистить();
			
			Строка = Документ.РасшифровкаПлатежа.Добавить();
			Строка.КурсВзаиморасчетов = 1;
			Строка.СуммаПлатежа = Документ.СуммаДокумента;
			Строка.СуммаВзаиморасчетов = Документ.СуммаДокумента;
			Строка.СтавкаНДС =  Документ.СтавкаНДС;
			ЗначениеСтавкиНДС = ПолучитьСтавкуНДС2(Строка.СтавкаНДС);
			Строка.СуммаНДС = Строка.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
			Строка.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Строка.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			Строка.СчетУчетаРасчетовСКонтрагентом = СчетРасчетовСКонтрагетом;
			
			Если Документ.СуммаДокумента > 0 тогда 
				ВремяДокумента = Документы.РасходныйКассовыйОрдер.ВремяДокументаПоУмолчанию();
				УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
				ЗаписатьДокумент(Документ,Стр.ИДдокумента,"РКО");			 
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыУЦ()
	ТЗ = ПолучитьИзВременногоХранилища(АдресУЦ);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Если Стр.НоменклатураНаименование <> "" тогда
			Стр.НоменклатураНаименование = Объект.Номенклатура.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.НоменклатураНаименование))[0].Номенклатура1С;
			Стр.ТипТовараНаименование = Объект.ТипыНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.ТипТовараНаименование))[0].ТипНоменклатуры1С;
		Иначе
		КонецЕсли;
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
	КонецЦикла;
	
	ДокументыУЦ = ТЗПромежуточная.Скопировать();
	ДокументыУЦ.Свернуть("ИДдокумента,Дата,Номер,ОрганизацияНаименование,ОрганизацияИНН,Проведен");
	ДокументыУЦ.Сортировать("Дата");
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для каждого Стр из ДокументыУЦ цикл
		Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Установка цен");
		Если не ЗначениеЗаполнено(Документ) Тогда
			Документ = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ = Документ.ПолучитьОбъект();
				Документ.УстановитьПометкуУдаления(Ложь);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Установка цен № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
				Продолжить;
			КОнецЕсли;
		КонецЕсли;
		
		Документ2 = НайтиДокументВБазе(Стр.ИДдокумента,"Установка цен");
		Если не ЗначениеЗаполнено(Документ2) Тогда
			Документ2 = Документы.УстановкаЦенНоменклатуры.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ2 = Документ2.ПолучитьОбъект();
				Документ2.УстановитьПометкуУдаления(Ложь);
				Документ2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Установка цен № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
				Продолжить;
			КОнецЕсли;
		КонецЕсли;
		
		Документ.Дата = Стр.Дата;
		Документ.ТипЦен = ВидЦеныЗакупки;
		Документ.НеПроводитьНулевыеЗначения = Ложь;
		Документ2.Дата = Стр.Дата;
		Документ2.ТипЦен = ВидЦеныПродажи;
		Документ2.НеПроводитьНулевыеЗначения = Ложь;			
		
		Документ.Товары.Очистить();
		Документ2.Товары.Очистить();
		
		ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("Дата,Номер,ОрганизацияИНН",Стр.Дата,Стр.Номер,Стр.ОрганизацияИНН));
		
		Для каждого СтрокаТЧ из ТабЧасть цикл
			СтрокаДок = Документ.Товары.Добавить();
			СтрокаДок.Валюта = Валюта;
			СтрокаДок.Номенклатура = СтрокаТЧ.НоменклатураНаименование;
			СтрокаДок.Цена = СтрокаТЧ.ЗакупочнаяЦенаСНДС;
			СтрокаДок2 = Документ2.Товары.Добавить();
			СтрокаДок2.Валюта = Валюта;
			СтрокаДок2.Номенклатура = СтрокаТЧ.НоменклатураНаименование;
			СтрокаДок2.Цена = СтрокаТЧ.ЦенасНДСрозничная;
		КонецЦикла;			
		
		Если Документ.Товары.Итог("Цена") = 0 тогда				
		Иначе
			ВремяДокумента = Документы.УстановкаЦенНоменклатуры.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
			ЗаписатьДокумент(Документ2,Стр.ИДдокумента,"Установка цен");
		КонецЕсли;
		
		Если Документ2.Товары.Итог("Цена") = 0 тогда				
		Иначе 				
			ВремяДокумента = Документы.УстановкаЦенНоменклатуры.ВремяДокументаПоУмолчанию();
			УстановитьВремяПоУмолчанию(Документ2,ВремяДокумента);
			ЗаписатьДокумент(Документ2,Стр.ИДдокумента,"Установка цен"); 
		КонецЕсли;
		
	КонецЦикла;
	
	АдресУЦ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыИнвентаризации()
	ТЗ = ПолучитьИзВременногоХранилища(АдресИН);
	ТЗПромежуточная = ТЗ.Скопировать();
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.date = ПолучитьДату(Стр.date);
		Стр.STOREH_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.STOREH_ID))[0].Объект;
		Если Стр.PRODUCT_CODE <> "" тогда
			Стр.PRODUCT_CODE = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ДопЗначение1,ТипОбъекта",Стр.PRODUCT_CODE,"Номенклатура"))[0].Объект;
			Стр.UNIT_ID = Стр.PRODUCT_CODE.ЕдиницаИзмерения;
		Иначе
		КонецЕсли;
		Стр.QTY = Число(Стр.QTY);
	КонецЦикла;
	
	ДокументыИН = ТЗПромежуточная.Скопировать();
	ДокументыИН.Свернуть("id,date,number,USER_ID,STOREH_ID");
	ДокументыИН.Сортировать("date");
	
	Если ИмяКонфигурации <> "УТ" тогда 
		КолСубконто = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01").ВидыСубконто.Количество();
		ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
		// Тимур - старт - 19.03.2020
		ПланСчетовМенеджер		= ПланыСчетов.Хозрасчетный;
		СчетБлюда				= ПланСчетовМенеджер.ГотоваяПродукция;
		СчетТовар				= ПланСчетовМенеджер.ТоварыНаСкладах;
		
		СчетБлюдаКолСубконто	= СчетБлюда.ВидыСубконто.Количество();
		СчетТоварКолСубконто	= СчетТовар.ВидыСубконто.Количество();
		
		Блюдо					= Перечисления.ОбщепитВидыНоменклатуры.Блюдо;
		Штука					= Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("870");
		СтатьяПрочиеДоходы		= Справочники.ПрочиеДоходыИРасходы.ВнереализационныеДоходыПоИнвентаризации;
		
		// финиш - 19.03.2020
		
	КонецЕсли;

	
	Для каждого Стр из ДокументыИН цикл
		Если ИмяКонфигурации <> "УТ" тогда
			Документ = НайтиДокументВБазе(Стр.id,"Инвентаризация");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ИнвентаризацияТоваровНаСкладе.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Инвентаризация товаров № "+ Стр.number + " от " + Стр.date + " существует!");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			
			Документ.Организация = Организация;
			// Тимур - старт - 19.03.2020
			Документ.СтатьяПрочихДоходовРасходов	= СтатьяПрочиеДоходы;
			// финиш - 19.03.2020
			// Тимур - старт - 25.03.2020
			Документ.ОбщепитРежимКорректировкиКоличества = Перечисления.ОбщепитРежимКорректировкиКоличестваВИнвентаризации.НеКорректироватьКнижноеКоличество;
			// финиш - 25.03.2020
			Документ.Склад = Стр.STOREH_ID;
			Документ.Дата = Стр.date;
			Документ.Записать(РежимЗаписиДокумента.Запись);
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,id",Стр.date,Стр.id));
			Таб = ТЗПромежуточная.Скопировать(Табчасть);
			Таб.Свернуть("PRODUCT_CODE","QTY");
			Документ.Товары.Очистить();
			
			Для каждого СтрокаТЧ из Таб цикл
				Если СтрокаТЧ.PRODUCT_CODE = "" тогда
					Продолжить;
				КонецЕсли;
				// Тимур - старт - 19.03.2020
				//СтрокаИН = Документ.Товары.Добавить(); 
				//СтрокаИН.Номенклатура = СтрокаТЧ.PRODUCT_CODE;
				//Счета = СчетаУчетавТЧ(СтрокаИН.Номенклатура,Документ.Склад);
				//Если Счета.СчетУчета <> ПустойСчет тогда
				//	Остатки = ПолучитьОстаткиИН(КолСубконто,СтрокаИН.Номенклатура,Документ,Счета.СчетУчета);
				//Иначе				 
				//	ДобавитьЛог("не задан счет учета для номенклатуры " + СтрокаИН.Номенклатура);
				//	Продолжить;
				//КонецЕсли;			 
				//СтрокаИН.КоличествоУчет = Остатки.Итог("КоличествоОстатокДт");
				//СтрокаИН.Количество = СтрокаТЧ.QTY;
				//СтрокаИН.СчетУчета = Счета.СчетУчета;
				
				Номенклатура	= СтрокаТЧ.PRODUCT_CODE;
				Если Номенклатура.ОбщепитВидНоменклатуры = Блюдо Тогда
					СчетУчета	= СчетБлюда;
					КолСубконто	= СчетБлюдаКолСубконто;
				Иначе
					СчетУчета	= СчетТовар;
					КолСубконто	= СчетТоварКолСубконто;
				КонецЕсли;
				Если СчетУчета = ПустойСчет Тогда
					ДобавитьЛог("не задан счет учета для номенклатуры " + Номенклатура);
					Продолжить;
				Иначе
					КоличествоУчет	= ПолучитьОстаткиИН(КолСубконто, Номенклатура, Документ, СчетУчета).Итог("КоличествоОстатокДт");
					КоличествоФакт	= СтрокаТЧ.QTY;
					Если КоличествоФакт = 0 И КоличествоУчет = 0 Тогда
						Продолжить;
					Иначе
						СтрокаИН					= Документ.Товары.Добавить(); 
						СтрокаИН.Номенклатура		= Номенклатура;
						СтрокаИН.КоличествоУчет		= КоличествоУчет;
						СтрокаИН.Количество			= КоличествоФакт;
						СтрокаИН.СчетУчета			= СчетУчета;
						СтрокаИН.Коэффициент		= 1;
						СтрокаИН.ЕдиницаИзмерения	= Штука;
					КонецЕсли;
				КонецЕсли;
				// финиш - 19.03.2020
			КонецЦикла;
			
			ЗаписатьДокумент(Документ,Стр.id,"Инвентаризация");
			НужноСписание = ПроверитьСписание(Документ.Товары);
			Если НужноСписание тогда 
				СоздатьСИН(Документ, Стр.id);
			КонецЕсли;
			
			НужноОприходование = ПроверитьОприходование(Документ.Товары);
			Если НужноОприходование тогда 
				СоздатьОП(Документ, Стр.id);
			КонецЕсли;			
		Иначе// УТ 11
			Документ = НайтиДокументВБазе(Стр.id,"Инвентаризация");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ПересчетТоваров.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Инвентаризация товаров № "+ Стр.number + " от " + Стр.date + " существует!");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
						
			Документ.Склад = Стр.STOREH_ID;
			Документ.Дата = Стр.date;
			Документ.Статус = Перечисления.СтатусыПересчетовТоваров.Выполнено;
			Документ.Записать(РежимЗаписиДокумента.Запись);
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,id",Стр.date,Стр.id));
			Таб = ТЗПромежуточная.Скопировать(Табчасть);
			Таб.Свернуть("PRODUCT_CODE","QTY");
			Документ.Товары.Очистить();
			Остатки = ПолучитьОстатки(Документ);
			Для каждого СтрокаТЧ из Таб цикл
				Если СтрокаТЧ.PRODUCT_CODE = "" тогда
					Продолжить;
				КонецЕсли;
				СтрокаИН = Документ.Товары.Добавить(); 
				СтрокаИН.Номенклатура = СтрокаТЧ.PRODUCT_CODE; 			
				СтрокаИН.КоличествоУпаковокФакт = СтрокаТЧ.QTY;
				СтрокаИН.КоличествоФакт = СтрокаТЧ.QTY;
				НужнаяСтрока = Остатки.Найти(СтрокаИН.Номенклатура,"Номенклатура");
				Если НужнаяСтрока <> Неопределено тогда 
					СтрокаИН.Количество = НужнаяСтрока.КоличествоОстаток;
					СтрокаИН.КоличествоУпаковок = СтрокаИН.Количество;
					Документ.УчетныеДанныеЗаполнены = Истина;
				КонецЕсли;
			КонецЦикла;			
			
			ЗаписатьДокумент(Документ,Стр.id,"Инвентаризация");
			
			НужноСписание = ПроверитьСписание(Документ.Товары);
			Если НужноСписание тогда 
				СоздатьСИН(Документ, Стр.id);
			КонецЕсли;
			
			НужноОприходование = ПроверитьОприходование(Документ.Товары);
			Если НужноОприходование тогда 
				СоздатьОП(Документ, Стр.id);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;			
	

	
	АдресИН = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки,УИДФормы);
КонецПроцедуры

&НаСервере
Функция ПолучитьОстаткиИН(КолСубконто,Номенклатура,Документ,СчетУчета)
	
	Если КолСубконто=1 Тогда
		Отбор=Новый Структура ("Субконто1,Организация,Счет",Номенклатура,Документ.Организация,СчетУчета);
	ИначеЕСли КолСубконто=2 Тогда
		Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",Номенклатура,Документ.Склад,Документ.Организация,СчетУчета);
	Иначе
		Если ПланыСчетов.Хозрасчетный.НайтиПоКоду(счетУчета.Код).ВидыСубконто[1].ВидСубконто.Наименование = "Склады" тогда 
			Отбор=Новый Структура ("Субконто1,Субконто2,Организация,Счет",Номенклатура,Документ.Склад,Документ.Организация,СчетУчета);
		Иначе
			Отбор=Новый Структура ("Субконто1,Субконто3,Организация,Счет",Номенклатура,Документ.Склад,Документ.Организация,СчетУчета);
		КонецЕсли; 			
	КонецЕСли;
	Момент = Новый МоментВремени(Документ.Дата, Документ.Ссылка);
	
	Возврат РегистрыБухгалтерии.Хозрасчетный.Остатки(Момент,,Отбор,,"Сумма,Количество");
КонецФункции

&НаСервере
Процедура ВидимостьВкладок()
	Элементы.СтраницаКонтрагенты.Видимость = ОТ ИЛИ ПН ИЛИ ПКО ИЛИ БП ИЛИ РКО ИЛИ БНР;
	Элементы.СтраницаТипНоменклатуры.Видимость = ОТ ИЛИ ПН ИЛИ РП ИЛИ УЦ ИЛИ ИН ИЛИ ПС;
	Элементы.СтраницаНоменклатура.Видимость = ОТ ИЛИ ПН ИЛИ РП ИЛИ УЦ ИЛИ ИН ИЛИ ПС;
	Элементы.СтраницаКассы.Видимость = ПКО ИЛИ БП ИЛИ РП;
	Элементы.СтраницаСотрудники.Видимость = ПКО ИЛИ БП ИЛИ РКО ИЛИ БНР ИЛИ ПС ИЛИ ИН;
	Элементы.СтраницаСтатьиЗатрат.Видимость = ПКО ИЛИ РКО ИЛИ БП ИЛИ БНР ИЛИ ПС;
	Элементы.СтраницаСклады.Видимость = ПН ИЛИ РП ИЛИ ИН ИЛИ ПС;
	Элементы.СтраницаСпособыОплат.Видимость = РП;
	Элементы.ВидЦеныЗакупки.Видимость = УЦ;
	Элементы.ВидЦеныПродажи.Видимость = УЦ;
	Элементы.СтатьяПрочихДоходовРасходов.Видимость = ИН ИЛИ ПН;	 
	Элементы.ГруппаИнвентаризация.Видимость = ИН ИЛИ ПН;
	Если ИмяКонфигурации = "УТ" тогда 
		Элементы.СтатьяРасходовУТ.Видимость = ИН ИЛИ ПС;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СообщитьОшибкуОрганизации()
	ОшибкаОрганизации = ПолучитьИзВременногоХранилища(АдресОшибки);
	
	ОшибкаОрганизации.Свернуть("ТекстОшибки");
	
	Для каждого Стр из ОшибкаОрганизации цикл
		Сообщить("В выгрузке присутствует организация не найденная в 1С, ИНН " + Стр.ТекстОшибки);	
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОТПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ПНПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура РППриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ПКОПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура БППриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура БНРПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура РКОПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура УЦПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ИНПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ВключитьВсе(Команда)
	ПН = Истина;
	РП = Истина;
	ИН = Истина;
	ПС = Истина;
	ВидимостьВкладок();
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьВсе(Команда)
	ПН = Ложь;
	РП = Ложь;
	ИН = Ложь;
	ПС = Ложь;
	ВидимостьВкладок();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДокумент(Документ,ГУИД,ТипДокумента)
	
	Если ПроводитьДокументы тогда
		Попытка
			Документ.Записать(РежимЗаписиДокумента.Проведение);
			ДобавитьЛог("Проведен документ " + ТипДокумента + " № " + Документ.Номер + " от " + Документ.Дата);
		Исключение
			Документ.Записать(РежимЗаписиДокумента.Запись);
			ДобавитьЛог("Не удалось провести " + ТипДокумента + " № " + Документ.Номер + " от " + Документ.Дата + ", документ будет записан!");
		КонецПопытки;				
	Иначе
		Документ.Записать(РежимЗаписиДокумента.Запись);
		ДобавитьЛог("Записан документ " + ТипДокумента + " № " + Документ.Номер + " от " + Документ.Дата);
	КонецЕсли;
	
	СохраненнаяНастройка = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	//Если ТипДокумента = "Отчет о розничных продажах" тогда 
	//	НужнаяЗапись = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",ГУИД,ТипДокумента));
	//Иначе
		НужнаяЗапись = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",ГУИД,ТипДокумента));	
		Если НужнаяЗапись.Количество() > 0 тогда 
			НужнаяЗапись[0].Объект = Документ.Ссылка;
			НужнаяЗапись[0].ТипОбъекта = ТипДокумента;
		Иначе
			Стр = СохраненнаяНастройка.СохраненнаяНастройка.СоответствияОбъектов.Добавить();
			Стр.Объект = Документ.Ссылка;
			Стр.ГУИД = ГУИД;
			Стр.ТипОбъекта = ТипДокумента;
		КонецЕсли;   
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиДокументВБазе(ГУИД,ТипОбъекта)
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	НужныйДокумент = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",ГУИД,ТипОбъекта));
	
	Если НужныйДокумент.Количество() = 0 тогда 
		Возврат Неопределено;	 
	ИначеЕсли Найти(НужныйДокумент[0].Объект,"Объект") > 0 тогда
		СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.Удалить(НужныйДокумент[0]);
		Возврат Неопределено;
	Иначе		
		Возврат НужныйДокумент[0].Объект;
	КонецЕсли;
	 
	 АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки,УИДФормы);
КонецФункции

&НаСервере
Функция ПолучитьКодировку()
	
	Если СписокКодировок = "ANSI" тогда 
		Возврат КодировкаТекста.ANSI;	
	ИначеЕсли СписокКодировок = "UTF8" тогда 
		Возврат КодировкаТекста.UTF8;
	ИначеЕсли  СписокКодировок = "UTF16" тогда
		Возврат КодировкаТекста.UTF16;		
	ИначеЕсли СписокКодировок = "OEM" тогда
		Возврат КодировкаТекста.OEM;
	Иначе
		Возврат КодировкаТекста.Системная;
	КонецЕсли;	
	
КонецФункции

&НаКлиенте
Процедура ПСПриИзменении(Элемент)
	ВидимостьВкладок();
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыПС()
	ТЗ = ПолучитьИзВременногоХранилища(АдресПС);
	ТЗПромежуточная = ТЗ.Скопировать();
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.date = ПолучитьДату(Стр.date);
		Если Стр.PRODUCT_CODE <> "" тогда
			Стр.PRODUCT_CODE = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ДопЗначение1,ТипОбъекта",Стр.PRODUCT_CODE,"Номенклатура"))[0].Объект;
			Стр.UNIT_ID = Стр.PRODUCT_CODE.ЕдиницаИзмерения;
		КонецЕсли;
		Стр.STOREH_ID = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.STOREH_ID))[0].Объект;
		Стр.QTY = Число(Стр.QTY);
	КонецЦикла;
	
	ДокументыПС = ТЗПромежуточная.Скопировать();
	ДокументыПС.Свернуть("id,date,STOREH_ID,WRITE_OFF_REF_ID",);
	ДокументыПС.Сортировать("date");
	
	Если ИмяКонфигурации <> "УТ" тогда
		КолСубконто = ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01").ВидыСубконто.Количество();
		ПустойСчет = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;	
	Для каждого Стр из ДокументыПС цикл		
		Если ИмяКонфигурации <> "УТ" тогда
			Документ = НайтиДокументВБазе(Стр.id,"Требование-накладная");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ТребованиеНакладная.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Требование накладная № "+ Стр.number + " от " + Стр.date + " существует!");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Документ.Организация = Организация;
			Документ.Склад = Стр.STOREH_ID;
			Документ.Дата = Стр.date;
			Документ.ПодразделениеОрганизации = Документ.Склад.ПодразделениеОрганизации;
			Документ.ПодразделениеЗатрат = Документ.ПодразделениеОрганизации;
			Документ.СчетаУчетаЗатратВТаблице = Ложь;						 		
			Документ.НДСВСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;	
			Документ.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = Истина;
			Если Стр.WRITE_OFF_REF_ID <> "" тогда 
				Счет = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.WRITE_OFF_REF_ID))[0].ДопЗначение1;
				Документ.СчетЗатрат = Счет;
			Иначе
				Документ.СчетЗатрат = ПланыСчетов.Хозрасчетный.НайтиПоКоду("26");
			КонецЕсли; 		
			номГруппа = ПолучитьНомГруппу();
			КолСубконто=ПланыСчетов.Хозрасчетный.НайтиПоКоду(Документ.СчетЗатрат.Код).ВидыСубконто.Количество();
			Если КолСубконто=1 Тогда
				Документ.Субконто1 = номГруппа; 
			ИначеЕСли КолСубконто=2 Тогда
				Документ.Субконто1 = номГруппа;
				Документ.Субконто2 = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.WRITE_OFF_REF_ID))[0].Объект;
			Иначе
				Документ.Субконто1 = номГруппа;
				Документ.Субконто2 = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.WRITE_OFF_REF_ID))[0].Объект;
			КонецЕСли;
			Если НЕ ЗначениеЗаполнено(Документ.Субконто2) тогда
				Документ.Субконто1 = Справочники.СтатьиЗатрат.СписаниеМатериалов;
			КонецЕсли;
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,id",Стр.date,Стр.id));
			Таб = ТЗПромежуточная.Скопировать(Табчасть);
			Таб.Свернуть("PRODUCT_CODE","QTY");
			Документ.Материалы.Очистить();
			
			Для каждого СтрокаТЧ из Таб цикл
				СтрокаС = Документ.Материалы.Добавить();
				СтрокаС.Номенклатура = СтрокаТЧ.PRODUCT_CODE;
				СтрокаС.ЕдиницаИзмерения = СтрокаС.Номенклатура.ЕдиницаИзмерения;
				СтрокаС.Количество = Число(СтрокаТЧ.QTY);
				СтрокаС.ПодразделениеЗатрат = Документ.ПодразделениеЗатрат;
				СтрокаС.Коэффициент = 1;			
				СтрокаС.НоменклатурнаяГруппа = СтрокаТЧ.PRODUCT_CODE.НоменклатурнаяГруппа;
				
				Счета = СчетаУчетавТЧ(СтрокаС.Номенклатура,Документ.Склад);
				Если Счета <>  Неопределено тогда
					СтрокаС.Счет = Счета.СчетУчета;					
				Иначе
					ДобавитьЛог("Не найден счет учета для номенклатуры: " + СтрокаС.Номенклатура.Наименование);
				КонецЕсли;			
			КонецЦикла;
			
			Если Документ.Материалы.Количество() > 0 тогда
				ЗаписатьДокумент(Документ,Стр.id,"Требование-накладная");
			КонецЕсли;
		Иначе  // УТ 11 			
			Документ = НайтиДокументВБазе(Стр.id,"Требование-накладная");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Списание товаров № "+ Стр.number + " от " + Стр.date + " существует!");
					Возврат;
				КОнецЕсли;
			КонецЕсли; 
			Документ.Товары.Очистить();			
					
			Документ.Дата = Стр.date;
			Документ.Организация = Организация;
			Документ.Склад =  Стр.STOREH_ID;
			Документ.Подразделение = Документ.Склад.Подразделение;			
			Документ.ВидЦены = Документ.Склад.УчетныйВидЦены;
			Если Стр.WRITE_OFF_REF_ID <> "" тогда 
				Документ.СтатьяРасходов = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД",Стр.WRITE_OFF_REF_ID))[0].Объект;
			Иначе
				Документ.СтатьяРасходов = СтатьяРасходовУТ;
			КонецЕсли;
			Документ.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоСебестоимости;
			
			ТабЧасть = ТЗПромежуточная.НайтиСТроки(Новый Структура("date,id",Стр.date,Стр.id));
			Таб = ТЗПромежуточная.Скопировать(Табчасть);
			Таб.Свернуть("PRODUCT_CODE","QTY");
			
			Для каждого Строка из Таб цикл
				СтрокаТЧ = Документ.Товары.Добавить();
				СтрокаТЧ.Номенклатура = Строка.PRODUCT_CODE;
				СтрокаТЧ.Количество = Строка.QTY;
			КонецЦикла;
			
			Если Документ.Товары.Количество() > 0 тогда 
				ЗаписатьДокумент(Документ,Стр.id,"Требование-накладная");	
			КонецЕсли;			
		КонецЕсли;	
	КонецЦикла;   	
	
	АдресПС = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки, УИДФормы);
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицы()
	Объект.Кассы.Очистить();
	Объект.Контрагенты.Очистить();
	Объект.Номенклатура.Очистить();
	Объект.Сотрудники.Очистить();
	Объект.ТипыНоменклатуры.Очистить();
	Объект.СтатьиДДС.Очистить();
	Объект.ПанельЛогов.Очистить();	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЛог(Сообщение)
		Стр = Объект.ПанельЛогов.Добавить();
		Стр.Лог = Сообщение;
КонецПроцедуры

&НаСервере
Функция СоздатьКонтрагентаНаСервере(ДанныеЗаполнения)
	Код = ДанныеЗаполнения.КодСИМПЛ; 
	Контрагент = СоздатьКонтрагентаЭлемент(Код, ДанныеЗаполнения.НаименованиеСИМПЛ, ДанныеЗаполнения.КонтрагентИНН);	

	ДанныеЗаполнения.Контрагент1С = Контрагент.Ссылка;
	
	Данные = Новый Структура();
	Данные.Вставить("Код1С", Контрагент.Код);
	Данные.Вставить("Контрагент", Контрагент.Ссылка);
	Данные.Вставить("ИНН", Контрагент.ИНН);
	
	Возврат Данные;
КонецФункции

&НаКлиенте
Процедура СоздатьКонтрагента(Команда)
	ТекДанные = Элементы.Контрагенты.ТекущиеДанные;
	
	Если ТекДанные = неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент1С) тогда 
		Возврат;
	КонецЕсли;
	
	Наименование = ТекДанные.НаименованиеСИМПЛ;
	код = ТекДанные.КодСИМПЛ;
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьКонтрагентаЗавершение", ЭтаФорма, Новый Структура("ТекДанные", ТекДанные)), "Создать контрагента с названием: " + ТекДанные.НаименованиеСИМПЛ  +  " и кодом: " + код + "?", РежимДиалогаВопрос.ДаНет);	
	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтрагентаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	
	Ответ = РезультатВопроса; 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("КодСИМПЛ", ТекДанные.КодСИМПЛ);
	ДанныеЗаполнения.Вставить("НаименованиеСИМПЛ", ТекДанные.НаименованиеСИМПЛ);
	ДанныеЗаполнения.Вставить("КонтрагентИНН", ТекДанные.КодСИМПЛ);
	ДанныеЗаполнения.Вставить("Контрагент1С", ТекДанные.Контрагент1С);
	
	Строка = СоздатьКонтрагентаНаСервере(ДанныеЗаполнения);	
	
	Элементы.Контрагенты.ТекущиеДанные.Контрагент1С = Строка.Контрагент;

КонецПроцедуры

&НаСервере
Функция СоздатьКонтрагентаЭлемент(Код, Наименование, ИНН)
	
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Элемм = Справочники.Контрагенты.НайтиПоКоду(Код, Истина);
	
	
	Контрагент.Наименование = Наименование;
	Контрагент.НаименованиеПолное = Наименование;
	Контрагент.ИНН = ИНН;
	Если ИмяКонфигурации <> "УТ" тогда 
		Если СтрДлина(Строка(ИНН)) = 10 тогда
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		Иначе
			Контрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		КонецЕсли;
	Иначе
		Если СтрДлина(Строка(ИНН)) = 10 тогда
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
		Иначе
			Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;		
		Партнер = СоздатьПартнера(Код, Наименование, ИНН,Контрагент.ЮрФизЛицо);
		Контрагент.Партнер = Партнер.Ссылка;
	КонецЕсли;
	
	Попытка
		Контрагент.Записать();
		Возврат Контрагент;
	Исключение
		Контрагент.УстановитьНовыйКод();
		Попытка
			Контрагент.Записать();
			Возврат Контрагент;
		исключение
			Сообщить("Контрагента создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);			
			Возврат Неопределено;
		КонецПопытки;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СоздатьПартнера(Код, Наименование, ИНН,ЮФЛицо)
	
	  Элемент = Справочники.Партнеры.СоздатьЭлемент();
	  Элемент.ДатаРегистрации = ТекущаяДата();
	  Элемент.Наименование = Наименование;
	  Элемент.НаименованиеПолное = Наименование;
	  Элемент.Поставщик = Истина;
	  Элемент.Клиент = Истина;
	  Элемент.ГруппаДоступа = Справочники.ГруппыДоступаПартнеров.НайтиПоНаименованию("Поставщики");
	  Если ЮФЛицо = Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель тогда
		  Элемент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	  ИначеЕсли ЮФЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо тогда
		  Элемент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	  Иначе
		  Элемент.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;		  
	  КонецЕсли;
  
	  Элемент.Записать();
	  Элемент.УстановитьНовыйКод();
	  
	  Возврат Элемент;
	
КонецФункции


&НаКлиенте
Процедура СоздатьВсехКонтрагентов(Команда)
	СоздатьВсехКонтрагентовНаСервере();
КонецПроцедуры


&НаСервере
Процедура СоздатьВсехКонтрагентовНаСервере()
	Для Каждого Стр из Объект.Контрагенты Цикл
		Если не ЗначениеЗаполнено(Стр.Контрагент1С) тогда
			Контр = СоздатьКонтрагентаЭлемент(Стр.КодСИМПЛ, Стр.НаименованиеСИМПЛ,	Стр.КонтрагентИНН);
			Если не Контр = неопределено Тогда
				Стр.Контрагент1С= Контр.Ссылка;				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла
КонецПроцедуры


&НаКлиенте
Процедура СоздатьНоменклатуру(Команда)
	ТекДанные = Элементы.Номенклатура.ТекущиеДанные;
	
	Если ТекДанные  = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Код = ТекДанные.КодСИМПЛ;
	
	Ответ = Неопределено;

	
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьНоменклатуруЗавершение", ЭтаФорма, Новый Структура("ТекДанные", ТекДанные)), "Создать элемент номенклатуры с названием: " + ТекДанные.НаименованиеСИМПЛ + 
	" и кодом: " + Код + "?", РежимДиалогаВопрос.ДаНет);	
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	
	Ответ = РезультатВопроса; 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	Ном = СоздатьНоменклатуруНаСервере(ТекДанные.КодСИМПЛ, ТекДанные.НаименованиеСИМПЛ);	
	
	Если Ном <> Неопределено Тогда
		
		Номенклатура = ПолучитьНоменклатуру(Ном);
		ТекДанные.Номенклатура1С = Ном;
		Текданные.Код1С = Номенклатура.Код1С;
		
	КонецЕсли;

КонецПроцедуры


&НаСервере
Функция СоздатьНоменклатуруНаСервере(Код, Наименование, Категория = Неопределено, СтавкаНДСстр = Неопределено)
	
	УТ = Найти(Метаданные.Представление(),"Управление торговлей") > 0;
		 	
	ВсяНомеклатура = ПолучитьИзВременногоХранилища(АдресЗНоменклатура);
	Попытка
		ВсеУслуги = ПолучитьИзВременногоХранилища(АдресЗУслуги);
	Исключение
	КонецПопытки;
	Если Код <>  Неопределено Тогда
		номен = ВсяНомеклатура.Найти(Наименование,"name");
		Если номен = Неопределено Тогда
			номен = ВсяНомеклатура.Найти(Код,"code");			
			Если номен = Неопределено Тогда
				Попытка
					Номен = ВсеУслуги.Найти(Наименование,"name");
					Если номен = неопределено тогда
						номен = ВсяНомеклатура.Найти(Код,"code");
						Если номен = Неопределено тогда
							ДобавитьЛог("Ошибка нахождения номенклатуры с кодом " + Код);
							Возврат Неопределено;
						КонецЕсли;
					КонецЕсли;
				Исключение
					ДобавитьЛог("Ошибка нахождения номенклатуры с кодом " + Код);
					Возврат Неопределено;					
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
		Если Наименование = Неопределено Тогда
			Наименование = номен.name;
		КонецЕсли;
		Если Категория = Неопределено Тогда
			Категория = Номен.type;
		КонецЕсли;					
	КонецЕсли;	
	
	Если Категория = Неопределено Тогда
		Сообщить("Неизвестная категория у номенклатуры с кодом " + Код, СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;	
	
	ТипНоменклатуры = Объект.ТипыНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ", Категория));
	Если ТипНоменклатуры.Количество() = 0 Тогда
		Сообщить("Незаполнена группа для категории " + Категория, СтатусСообщения.ОченьВажное);
		Возврат Неопределено;
	КонецЕсли;		
	
	Ном = Справочники.Номенклатура.СоздатьЭлемент();
	Если Код <>  Неопределено Тогда
		Элемм = Справочники.Номенклатура.НайтиПоКоду(Код, Истина);
		Если не ЗначениеЗаполнено(Элемм) тогда
			Ном.Код = Код;
		КонецЕсли;
	КонецЕсли;	
	
	Ном.Наименование = Наименование;
	
	Ном.НаименованиеПолное = Наименование;
	Если НЕ УТ тогда
		Если Метаданные.Версия > "3.0.67.00" тогда 
		Ном.ВидСтавкиНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		Ном.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	Попытка
		Ном.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Номен.UNIT_NAME);
	Исключение// Услуга 
		Ном.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка()
	КонецПопытки;	
		Если Ном.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка() тогда
			Попытка 
				Ном.ЕдиницаИзмерения = СоздатьЕдиницуИзмерения(Номен.UNIT_NAME);
			Исключение
				Ном.ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("796");
			КонецПопытки;	
		КонецЕсли;	
		Ном.Услуга = ТипНоменклатуры[0].ТипНоменклатуры1С.Услуга;
		Ном.ВидНоменклатуры =ТипНоменклатуры[0].ТипНоменклатуры1С.Ссылка;
	Иначе	// Управление торговлей
		Ном.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		Если Метаданные.Справочники.Найти( "УпаковкиНоменклатуры") <> Неопределено Тогда
			ИмяСправочникаЕдИзм	= 	"УпаковкиНоменклатуры";
		Иначе
			ИмяСправочникаЕдИзм	= 	"УпаковкиЕдиницыИзмерения";
		КонецЕсли;
		
		ИмяПоляОписания		= 	"Описание"; 
		ИмяПоляТипЦены		=	"ВидЦены";
		РегистрШтрихкоды	= 	"ШтрихкодыНоменклатуры";
		
		Ном.ВидНоменклатуры = ТипНоменклатуры[0].ТипНоменклатуры1С;
		Ном.ТипНоменклатуры = Ном.ВидНоменклатуры.ТипНоменклатуры;
		Попытка
			Ном.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
			Ном.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
		Исключение
		КонецПопытки;
		Попытка
			Если НЕ ПустаяСтрока(Строка(Номен.UNIT_NAME)) Тогда
				Ном.ЕдиницаИзмерения = Справочники[ИмяСправочникаЕдИзм].НайтиПоНаименованию(Строка(Номен.UNIT_NAME));
			КонецЕсли;
		Исключение
			  Ном.ЕдиницаИзмерения = Неопределено;
		КонецПопытки;
		
		Если Не ЗначениеЗаполнено( Ном.ЕдиницаИзмерения) Тогда
			Ном.ЕдиницаИзмерения = Справочники[ИмяСправочникаЕдИзм].НайтиПоНаименованию("шт");	
		КонецЕсли;
	КонецЕсли;

	Попытка
		Ном.Записать();
	Исключение
		Ном.УстановитьНовыйКод();
		Попытка
			Ном.Записать();
		Исключение
			Сообщить("Номенклатуру создать не удалось:" + ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
			Возврат Неопределено;	
		КонецПопытки;
	КонецПопытки;
	
	Возврат Ном.Ссылка;
КонецФункции

&НаСервере
Функция НормальныйКод(Код,Число)
	
	Пока СтрДлина(Код) < Число цикл
		Код = "0" + Код;
	КонецЦикла;	
	Возврат Код;
	   
КонецФункции
	
	&НаСервере 
Функция ПолучитьНоменклатуру (Ном)
	
	Номенклатура = Новый Структура;	
	Номенклатура.Вставить("Номенклатура1С", Ном.Наименование);
	Номенклатура.Вставить("Код1С", Ном.Код);
	
	Возврат Номенклатура;	
	
КонецФункции

&НаСервере
Функция НайтиДанныеНоменклатуры(Код)
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("НоменклатураНаименование");
	ТаблицаНоменклатуры.Колонки.Добавить("НоменклатураКод");
	ТаблицаНоменклатуры.Колонки.Добавить("ТипТовараНаименование");
	ТаблицаНоменклатуры.Колонки.Добавить("ЕдиницаИзмеренияНаименование");
	ТаблицаНоменклатуры.Колонки.Добавить("СтавкаНДС");
	
	Если ПН тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресПН);
		Для каждого Стр из ТЗ Цикл
			Строка = ТаблицаНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла;
		АдресПН = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	КонецЕсли;
	
	Если ОТ тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресОТ);
		Для каждого Стр из ТЗ Цикл
			Строка = ТаблицаНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла; 
		АдресОТ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	КонецЕсли;
	
	Если УЦ тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресУЦ);
		Для каждого Стр из ТЗ Цикл
			Строка = ТаблицаНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла;
		АдресУЦ = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	КонецЕсли;
	
	Если ИН тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресИН);
		Для каждого Стр из ТЗ Цикл
			Строка = ТаблицаНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла;
		АдресИН = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	КонецЕсли;
	
	Если ПС тогда
		ТЗ = ПолучитьИзВременногоХранилища(АдресПС);
		Для каждого Стр из ТЗ Цикл
			Строка = ТаблицаНоменклатуры.Добавить();	
			ЗаполнитьЗначенияСвойств(Строка,Стр);
		КонецЦикла;
		АдресПС = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
	КонецЕсли;
	
	
	ТаблицаНоменклатуры.Свернуть("НоменклатураНаименование,СтавкаНДС,НоменклатураКод,ТипТовараНаименование,ЕдиницаИзмеренияНаименование");
	АдресВременнаяТаблица = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры,УИДФормы);
	Возврат ТаблицаНоменклатуры;	
КонецФункции


&НаКлиенте
Процедура СоздатьВсюНоменклатуру(Команда)
	ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьВсюНоменклатуруЗавершение", ЭтаФорма), "Создать все номенклатурные позиции?",РежимДиалогаВопрос.ДаНет,0);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВсюНоменклатуруЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕСли;
	СоздатьВсюНоменклатуруНаСервере();

КонецПроцедуры


&НаСервере
Процедура СоздатьВсюНоменклатуруНаСервере()
	Для Каждого Стр из Объект.Номенклатура Цикл
		Если не ЗначениеЗаполнено(Стр.Номенклатура1С) тогда
			Ном = СоздатьНоменклатуруНаСервере(Стр.КодСИМПЛ, Стр.НаименованиеСИМПЛ);
			Если Ном <>  Неопределено Тогда
				Стр.Номенклатура1С = Ном;
				Стр.Код1С = ном.Код;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтрагентов(Команда)
	Для каждого Стр из Объект.Контрагенты цикл
			Стр.Контрагент1С = "";
			Стр.Договор = "";
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьНоменклатуру(Команда)
	Для каждого Стр из Объект.Номенклатура цикл
			Стр.Номенклатура1С = "";
			Стр.Код1С = "";
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыБНР()
	
	ТЗ = ПолучитьИзВременногоХранилища(АдресБНР);
	ТЗПромежуточная = ТЗ.Скопировать();
	
	Для каждого Стр из ТЗПромежуточная цикл
		Стр.Дата = ПолучитьДату(Стр.Дата);
		Стр.ОрганизацияНаименование = Справочники.Организации.НайтиПоИНН(Стр.ОрганизацияИНН);
		Если Стр.КонтрагентНаименование <> "" тогда
			Стр.КонтрагентНаименование = Объект.Контрагенты.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.КонтрагентНаименование))[0].Контрагент1С;
		КонецЕсли;
		Если Стр.СотрудникНаименование <> "" тогда 
			Стр.СотрудникНаименование = Объект.Сотрудники.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",Стр.СотрудникНаименование))[0].Сотрудник1С;
		КонецЕсли;
		Если Стр.СтатьяНаименование <> "" тогда 
			Стр.СтатьяНаименование = Объект.СтатьиДДС.НайтиСтроки(Новый Структура("КодСИМПЛ",Стр.СтатьяКод))[0].СтатьяЗатрат1С;
		КонецЕсли;
	КонецЦикла;
	
	
	ДокументыБНР = ТЗПромежуточная.Скопировать();
	ДокументыБНР.Свернуть("ИДдокумента,Дата,СтатьяНаименование,Номер,ОрганизацияНаименование,Сумма,КонтрагентНаименование,Комментарий,ОрганизацияИНН,Проведен,СотрудникНаименование");
	ДокументыБНР.Сортировать("Дата"); 
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить(); 		
	
	Для каждого Стр из ДокументыБНР цикл
		Если ЗначениеЗаполнено(Стр.КонтрагентНаименование) тогда
			
			Документ = НайтиДокументВБазе(Стр.ИДдокумента,"Платежное поручение");
			Если не ЗначениеЗаполнено(Документ) Тогда
				Документ = Документы.ПлатежноеПоручение.СоздатьДокумент();
			Иначе
				Если ЗаменятьДокументы Тогда
					Документ = Документ.ПолучитьОбъект();
					Документ.УстановитьПометкуУдаления(Ложь);
					Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					ДобавитьЛог("Платежное поручение № "+ Стр.Номер + " от " + Стр.Дата + " существует!");
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Документ.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
			Документ.ВалютаДокумента =  Валюта;
			Документ.Дата = Стр.Дата ; 
			Если ОрганизацияИзДокумента тогда 
				Документ.Организация = Стр.ОрганизацияНаименование;
			Иначе
				Документ.Организация = Организация;
			КонецЕсли;
			Документ.Комментарий = Стр.Комментарий; 
			Документ.СуммаДокумента = Число(Стр.Сумма);
			Документ.Контрагент = Стр.КонтрагентНаименование;
			Договор = Объект.Контрагенты.НайтиСтроки(Новый Структура("Контрагент1С",Документ.Контрагент));
			Если Договор.Количество() > 0 тогда
				Документ.ДоговорКонтрагента = Договор[0].Договор;
			КонецЕсли;
			Документ.СтавкаНДС = СтавкаНДС;
			Документ.СчетОрганизации = Документ.Организация.ОсновнойБанковскийСчет;
			Документ.СчетКонтрагента = Документ.Контрагент.ОсновнойБанковскийСчет;
			Документ.ИННПолучателя = Документ.Контрагент.ИНН;
			Документ.КПППолучателя = Документ.Контрагент.КПП;
			Документ.ИННПлательщика = Документ.Организация.ИНН;
			Документ.КПППлательщика = Документ.Организация.КПП;
			Документ.СтатьяДвиженияДенежныхСредств = Стр.СтатьяНаименование;
			Документ.НазначениеПлатежа = "Оплата поставщику " + Документ.Контрагент;
			
			ВремяДокумента = Новый Структура("Часы, Минуты", 10, 0);
			УстановитьВремяПоУмолчанию(Документ,ВремяДокумента);
			ЗаписатьДокумент(Документ,Стр.ИДдокумента,"Платежное поручение");			 
		Иначе
			// находится в разработке
		КонецЕсли;		
	КонецЦикла;  	
	
КонецПроцедуры


&НаКлиенте
Процедура НайтиСоответствияПоИНН(Команда)
	НайтиСоответствияПоИНННаСервере();
КонецПроцедуры


&НаСервере
Процедура НайтиСоответствияПоИНННаСервере()
	
	
	ПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
	Для каждого Стр из Объект.Контрагенты цикл
		Если НЕ ЗначениеЗаполнено(Стр.КонтрагентИНН) тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Стр.Контрагент1С) тогда
			КонтрагентСсылка = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",Стр.КонтрагентИНН);
			Если КонтрагентСсылка = ПустаяСсылка тогда
				КонтрагентСсылка = Справочники.Контрагенты.НайтиПоНаименованию(Стр.НаименованиеСИМПЛ,Истина);
				Если КонтрагентСсылка <> ПустаяСсылка тогда
					Стр.Контрагент1С = КонтрагентСсылка;
				КонецЕсли;					   
			Иначе
				Стр.Контрагент1С = КонтрагентСсылка;
			КонецЕсли;			   
		КонецЕсли;		
	КонецЦикла;
	
	Элементы.СоздатьВсехКонтрагентов.Доступность = Истина;
	Элементы.СоздатьКонтрагента.Доступность = Истина;
	
КонецПроцедуры


&НаСервере
Процедура НайтиСоответствияПоНаименованиюНаСервере()
	
	ПустаяССылка = Справочники.Номенклатура.ПустаяСсылка();
	Для каждого Стр из Объект.Номенклатура цикл
		Если НЕ ЗначениеЗаполнено(Стр.Номенклатура1С) тогда
			НоменклатураСсылка = Справочники.Номенклатура.НайтиПоНаименованию(Стр.НаименованиеСИМПЛ,Истина);
			Если НоменклатураСсылка = ПустаяССылка тогда 
			Иначе
				Стр.Номенклатура1С = НоменклатураСсылка;
				Стр.Код1С = НоменклатураСсылка.Код;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;
	Элементы.СоздатьВсюНоменклатуру.Доступность = Истина;
	Элементы.СоздатьНоменклатуру.Доступность = Истина;
КонецПроцедуры


&НаКлиенте
Процедура НайтиСоответствияПоНаименованию(Команда)
	НайтиСоответствияПоНаименованиюНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьОрганизацииНаСервере()
	
	АдресЗОрганизация = ЗагрузитьЗапросом("rest/v3/public/refs/company",АдресЗОрганизация);
	АктуализироватьСправочники(АдресЗОрганизация,"Организации");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьОрганизации(Команда)
	ЗагрузитьОрганизацииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиНаСервере()
	 АдресЗУслуги = ЗагрузитьЗапросом("rest/v3/public/refs/services",АдресЗУслуги);
	 АктуализироватьСправочники(АдресЗУслуги,"Услуги");	
КонецПроцедуры

	

&НаСервере
Процедура ЗагрузитьНоменклатуруНаСервере()
	
	АдресЗНоменклатура = ЗагрузитьЗапросом("rest/v3/public/refs/nomenclature",АдресЗНоменклатура);
	АктуализироватьСправочники(АдресЗНоменклатура,"Номенклатура");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьНоменклатуру(Команда)
	ЗагрузитьНоменклатуруНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьПоставщиковНаСервере()
	
	АдресЗПоставщики = ЗагрузитьЗапросом("/rest/v3/public/refs/suppliers",АдресЗПоставщики);
	АктуализироватьСправочники(АдресЗПоставщики,"Поставщики");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьПоставщиков(Команда)
	ЗагрузитьПоставщиковНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьСотрудниковНаСервере()
	
	АдресЗСотрудники = ЗагрузитьЗапросом("/rest/v3/public/refs/users",АдресЗСотрудники);
	АктуализироватьСправочники(АдресЗСотрудники,"Сотрудники");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСотрудников(Команда)
	ЗагрузитьСотрудниковНаСервере();
КонецПроцедуры

&НаСервере
Функция ЗагрузитьЗапросом(ЦельЗапроса,АдресНазначения)	
	ЗаголовокHTTP = Новый Соответствие(); 
	ЗаголовокHTTP.Вставить("Content-Type", "text/csv;charset=utf8"); 
	ЗаголовокHTTP.Вставить("Authorization","Bearer " + СокрЛП(ТокенЛичногоКабинета));	
	Запрос = Новый HTTPЗапрос(ЦельЗапроса,ЗаголовокHTTP);
	Если ИспользоватьПрокси тогда
		ПроксиСервер = Новый интернетПрокси;
		ПроксиСервер.Пользователь = ПроксиПользователь;
		ПроксиСервер.Пароль       = ПроксиПароль;
		ПроксиСервер.Порт();
		Соединение = Новый HTTPСоединение(АдресСервераКасл + "/",,,,ПроксиСервер,Истина);
	Иначе		
		Соединение = Новый HTTPСоединение(АдресСервераКасл + "/",,,,,Истина);		
	КонецЕсли;
	Попытка
		Ответ = Соединение.Получить(Запрос, ПолучитьИмяВременногоФайла("csv"));
	Исключение
		Сообщить("Неверный адрес сервера!");
		ОшибкаЗагрузки = Истина;
		Возврат Неопределено;
	КонецПопытки;
	Если Ответ.КодСостояния <> 200 тогда
		Сообщить("Ошибка " + Ответ.КодСостояния);
		УдалитьФайлы(Ответ);
	Иначе
		ВременныйФайл = Ответ.ПолучитьИмяФайлаТела();
		Текст = Новый ТекстовыйДокумент;		
		Текст.Прочитать(ВременныйФайл,КодировкаТекста.UTF8);		
		АдресНазначения = ПрочитатьФайл(Текст,Ложь);
		УдалитьФайлы(Ответ);
		Возврат АдресНазначения;
	КонецЕсли;
	
КонецФункции


&НаСервере
Процедура ЗагрузитьУстройстваНаСервере()
	
	АдресЗУстройства = ЗагрузитьЗапросом("/rest/v3/public/refs/devices",АдресЗУстройства);
	АктуализироватьСправочники(АдресЗУстройства,"Устройства");	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьУстройства(Команда)
	ЗагрузитьУстройстваНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьЗТорговыеТочкиНаСервере()
	
	АдресЗТорговыеТочки = ЗагрузитьЗапросом("/rest/v3/public/refs/shops",АдресЗТорговыеТочки);
	АктуализироватьСправочники(АдресЗТорговыеТочки,"ТорговыеТочки");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЗТорговыеТочки(Команда)
	ЗагрузитьЗТорговыеТочкиНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьЗСкладыНаСервере()
	
	АдресЗСклады = ЗагрузитьЗапросом("/rest/v3/public/refs/storehouses",АдресЗСклады);
	АктуализироватьСправочники(АдресЗСклады,"Склады");	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЗСклады(Команда)
	ЗагрузитьЗСкладыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьЗСписанияНаСервере()
	
	АдресЗСтатьиСписаний = ЗагрузитьЗапросом("/rest/v3/public/refs/write-offs",АдресЗСтатьиСписаний);
	АктуализироватьСправочники(АдресЗСтатьиСписаний,"СтатьиСписаний");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьЗСписания(Команда)
	ЗагрузитьЗСписанияНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьСпособыОплатыНаСервере()
	
	АдресЗСпособыОплаты = ЗагрузитьЗапросом("/rest/v3/public/refs/payment-scripts",АдресЗСпособыОплаты);
	АктуализироватьСправочники(АдресЗСпособыОплаты,"СпособыОплаты");
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСпособыОплаты(Команда)
	ЗагрузитьСпособыОплатыНаСервере();
КонецПроцедуры


&НаСервере
Процедура ЗагрузитьСправочникиНаСервере()
	ЗагрузитьНоменклатуруНаСервере();
	ЗагрузитьПоставщиковНаСервере();
	ЗагрузитьСотрудниковНаСервере();
	ЗагрузитьСпособыОплатыНаСервере();
	ЗагрузитьЗСписанияНаСервере();
	ЗагрузитьЗСкладыНаСервере();
	ЗагрузитьЗТорговыеТочкиНаСервере();
	ЗагрузитьУстройстваНаСервере();	
КонецПроцедуры


&НаКлиенте
Процедура ЗагрузитьСправочники(Команда)
	ЗагрузитьСправочникиНаСервере();
КонецПроцедуры  

&НаСервере
Процедура АктуализироватьСправочники(Адрес,ТипСправочника)
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	
	Попытка
		ТЗ = ПолучитьИзВременногоХранилища(Адрес);
	Исключение
		Возврат;
	КонецПопытки;

	Для каждого Строка ИЗ ТЗ цикл
		Если НеЗагружатьУдаленные И ТЗ.Колонки.Найти("IS_DELETED") <> Неопределено И Строка.IS_DELETED = "true" тогда
			Продолжить;
		КонецЕсли;
		Если ТипСправочника = "Номенклатура" ИЛИ ТипСправочника = "Услуги" тогда
			НужнаяЗапись = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ДопЗначение1,ТипОбъекта,ГУИД",Строка.CODE,"Номенклатура",Строка.VARIATION_ID));
		Иначе
			НужнаяЗапись = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ГУИД,ТипОбъекта",Строка.ID,ТипСправочника));
		КонецЕсли;
		
		Если НужнаяЗапись.Количество() > 0 тогда 
			
		Иначе                                       			
			ДобавитьВСоответствия(Строка, ТипСправочника);
		КонецЕсли; 
	КонецЦикла;
	Если ТипСправочника = "Номенклатура" ИЛИ ТипСправочника = "Услуги" тогда		
		ТЗТип = ТЗ.Скопировать();
		ТЗТип.Свернуть("TYPE");
		Для каждого СтрокаТЗ из ТЗТип цикл
			Если Объект.ТипыНоменклатуры.НайтиСтроки(Новый Структура("НаименованиеСИМПЛ",СтрокаТЗ.type)).Количество() <= 0 тогда
			Стр = Объект.ТипыНоменклатуры.Добавить();
			Стр.НаименованиеСИМПЛ = СтрокаТЗ.type;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Адрес = ПоместитьВоВременноеХранилище(ТЗ,УИДФормы);
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьВСоответствия(Строка, ТипСправочника)
	Если ТипСправочника = "Организации" тогда
		Сообщить("Организация с ИНН " + Строка.INN + " в базе не найдена");
	ИначеЕсли ТипСправочника = "Номенклатура" тогда
		Если Объект.Номенклатура.НайтиСтроки(Новый Структура("КодСимпл,idqasl",Строка.code,Строка.VARIATION_ID)).Количество() <= 0 тогда
			Стр = Объект.Номенклатура.Добавить();
			Стр.КодСимпл = Строка.code;
			Если строка.VARIATION_NAME <> "" тогда 
				Стр.НаименованиеСимпл = Строка.name + "/" + строка.VARIATION_NAME;
			Иначе
				Стр.НаименованиеСимпл = Строка.name;
			КонецЕсли;			
			Стр.idqasl = Строка.VARIATION_ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "Поставщики" тогда
		Если Объект.Контрагенты.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.Контрагенты.Добавить();
			Стр.КонтрагентИНН = Строка.INN;
			Стр.НаименованиеСИМПЛ = Строка.name;
			Стр.idqasl = Строка.ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "Сотрудники" тогда
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.Сотрудники.Добавить();
			Стр.НаименованиеСИМПЛ = Строка.name;
			Стр.idqasl = Строка.ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "СпособыОплаты" тогда
		Если Строка.Method = "Cash" И Строка.IS_FISCAL = "true" тогда
			Возврат;
		ИначеЕсли Строка.Method = "Cash" И Строка.IS_FISCAL = "false" тогда
			Строка.IS_FISCAL = "true";
			Возврат;
		КонецЕсли;
		Если Объект.СпособыОплаты.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.СпособыОплаты.Добавить();
			Стр.idqasl = Строка.ID;
			Стр.nameQasl = Строка.name;
			стр.Фискальный = ПолучитьБулево(Строка.IS_FISCAL);
		КонецЕсли;
	ИначеЕсли ТипСправочника = "СтатьиСписаний" тогда
		Если Объект.СтатьиДДС.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.СтатьиДДС.Добавить();		
			Стр.НаименованиеСИМПЛ = Строка.name;
			Стр.idqasl = Строка.ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "Склады" тогда
		Если Объект.Склады.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.Склады.Добавить();
			Стр.КодQasl = Строка.code;
			Стр.НаименованиеQasl = Строка.name;
			Стр.idqasl = Строка.ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "ТорговыеТочки" тогда
		
	ИначеЕсли ТипСправочника = "Устройства" тогда
		Если Объект.Кассы.НайтиСтроки(Новый Структура("idqasl",Строка.ID)).Количество() <= 0 тогда
			Стр = Объект.Кассы.Добавить();
			Стр.КодСИМПЛ = Строка.FN;
			Стр.НаименованиеСИМПЛ = Строка.name;
			Стр.idqasl = Строка.ID;
		КонецЕсли;
	ИначеЕсли ТипСправочника = "Услуги" тогда
		Если Объект.Номенклатура.НайтиСтроки(Новый Структура("КодСимпл,idqasl",Строка.code,Строка.VARIATION_ID)).Количество() <= 0 тогда
			Стр = Объект.Номенклатура.Добавить();
			Стр.КодСимпл = Строка.code;
			Если строка.VARIATION_NAME <> "" тогда 
				Стр.НаименованиеСимпл = Строка.name; //+ "/" + строка.VARIATION_NAME;
			Иначе
				Стр.НаименованиеСимпл = Строка.name;
			КонецЕсли;			
			Стр.idqasl = Строка.VARIATION_ID;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДату()
	
	СтрокаЗапроса = "?from=" + Строка(Сред(Период.ДатаНачала,7,4)) + "-" + Строка(Сред(Период.ДатаНачала,4,2)) + "-" + Строка(Сред(Период.ДатаНачала,0,2)) +
	                      "&to=" + Строка(Сред(Период.ДатаОкончания,7,4)) + "-" + Строка(Сред(Период.ДатаОкончания,4,2)) + "-" + Строка(Сред(Период.ДатаОкончания,0,2));
						 
	Возврат СтрокаЗапроса;
КонецФункции

&НаСервере
Функция СоздатьСтруктуруЗапросовКДокументам()
	
	Запросы = Новый Структура();
	Запросы.Вставить("РП","/rest/v3/public/docs/sale");
	Запросы.Вставить("ПН","/rest/v3/public/docs/income");
	Запросы.Вставить("ИН","/rest/v3/public/docs/inventory");
	Запросы.Вставить("ПС","/rest/v3/public/docs/write-off");
	Возврат Запросы;
КонецФункции

&наСервере
Процедура СоздатьОП(ДокументОснование,idОснования)
	
	Если ИмяКонфигурации <> "УТ" тогда 
		Документ = НайтиДокументВБазе(idОснования,"Оприходование инвентаризация");
		Если не ЗначениеЗаполнено(Документ) Тогда
			Документ = Документы.ОприходованиеТоваров.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ = Документ.ПолучитьОбъект();
				Документ.УстановитьПометкуУдаления(Ложь);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Оприходование товаров № "+ ДокументОснование.number + " от " + ДокументОснование.date + " существует!");
				Возврат;
			КОнецЕсли;
		КонецЕсли; 
		Документ.Товары.Очистить();
		Документ.ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование.Ссылка);
		Документ.Дата = ДокументОснование.Дата;
		Документ.Организация = ДокументОснование.Организация;
		Документ.ПодразделениеОрганизации = документОснование.Склад.ПодразделениеОрганизации;
		Документ.ИнвентаризацияТоваровНаСкладе = ДокументОснование.Ссылка;
		Документ.СтатьяПрочихДоходовРасходов = СтатьяПрочихДоходовРасходов;
		Если Документ.Товары.Количество() > 0 тогда
			ЗаписатьДокумент(Документ,idОснования,"Оприходование инвентаризация");
		КонецЕсли;
	Иначе // УТ 11
		Документ = НайтиДокументВБазе(idОснования,"Оприходование инвентаризация");
		Если не ЗначениеЗаполнено(Документ) Тогда
			Документ = Документы.ОприходованиеИзлишковТоваров.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ = Документ.ПолучитьОбъект();
				Документ.УстановитьПометкуУдаления(Ложь);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Оприходование № "+ ДокументОснование.number + " от " + ДокументОснование.date + " существует!");
				Возврат;
			КОнецЕсли;
		КонецЕсли; 
		Документ.Товары.Очистить();
		
		Если Не ЗначениеЗаполнено(Документ.ВидЦены) Тогда
			ВидЦены = Справочники.Склады.УчетныйВидЦены(Склад);
		КонецЕсли;
		
		Документ.ЗаполнитьТабличнуюЧастьТовары(ДокументОснование.Ссылка);
		
		Документ.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		Документ.ПересчетТоваров = ДокументОснование.Ссылка;		
		Документ.Дата = ДокументОснование.Дата;
		Документ.Организация = Организация;
		Документ.Подразделение = документОснование.Склад.Подразделение;
		Документ.Склад = ДокументОснование.Склад;
		Документ.СтатьяДоходов = СтатьяПрочихДоходовРасходов;
		Документ.АналитикаДоходов = Документ.Склад.Подразделение;
		Документ.ВидЦены = ДокументОснование.Склад.УчетныйВидЦены;
		Если Документ.Товары.Количество() > 0 тогда
			ЗаписатьДокумент(Документ,idОснования,"Оприходование инвентаризация");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура Пауза(Секунды)
	
	А = 0;
	ВремяТаймаута = ТекущаяДата() + Секунды;
	Пока ТекущаяДата() < ВремяТаймаута цикл
	  А = А + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьСИН(ДокументОснование,idОснования)
	Если ИмяКонфигурации <> "УТ" тогда 
		Документ = НайтиДокументВБазе(idОснования,"Списание инвентаризация");
		Если не ЗначениеЗаполнено(Документ) Тогда
			Документ = Документы.СписаниеТоваров.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ = Документ.ПолучитьОбъект();
				Документ.УстановитьПометкуУдаления(Ложь);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Списание товаров № "+ ДокументОснование.number + " от " + ДокументОснование.date + " существует!");
				Возврат;
			КОнецЕсли;
		КонецЕсли; 
		Документ.Товары.Очистить();
		
		Документ.Дата = ДокументОснование.Дата;
		Документ.Организация = ДокументОснование.Организация;
		Документ.ПодразделениеОрганизации = документОснование.Склад.ПодразделениеОрганизации;
		Документ.ЗаполнитьТоварыПоИнвентаризацииТоваров(ДокументОснование.Ссылка);
		Документ.ИнвентаризацияТоваровНаСкладе = ДокументОснование.Ссылка;
		Если Документ.Товары.Количество() > 0 тогда
			ЗаписатьДокумент(Документ,idОснования,"Списание инвентаризация");	
		КонецЕсли;
	Иначе   // УТ 11
		Документ = НайтиДокументВБазе(idОснования,"Списание инвентаризация");
		Если не ЗначениеЗаполнено(Документ) Тогда
			Документ = Документы.СписаниеНедостачТоваров.СоздатьДокумент();
		Иначе
			Если ЗаменятьДокументы Тогда
				Документ = Документ.ПолучитьОбъект();
				Документ.УстановитьПометкуУдаления(Ложь);
				Документ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Иначе
				ДобавитьЛог("Списание товаров № "+ ДокументОснование.number + " от " + ДокументОснование.date + " существует!");
				Возврат;
			КОнецЕсли;
		КонецЕсли; 
		Документ.Товары.Очистить();
		
		Документ.ЗаполнитьТабличнуюЧастьТовары(ДокументОснование.Ссылка);
		Документ.ПересчетТоваров = ДокументОснование.Ссылка;		
		Документ.Дата = ДокументОснование.Дата;
		Документ.Организация = Организация;
		Документ.Подразделение = документОснование.Склад.Подразделение;
		Документ.Склад = ДокументОснование.Склад;
		Документ.АналитикаРасходов = Документ.Склад.Подразделение;
		Документ.АналитикаАктивовПассивов = Документ.АналитикаРасходов;
		Документ.СтатьяРасходов = СтатьяРасходовУТ;
		Документ.ИсточникИнформацииОЦенахДляПечати = Перечисления.ИсточникиИнформацииОЦенахДляПечати.ПоВидуЦен;
		Документ.ВидЦены = ДокументОснование.Склад.УчетныйВидЦены;
		Если Документ.Товары.Количество() > 0 тогда
			ЗаписатьДокумент(Документ,idОснования,"Списание инвентаризация");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоответствияНоменклатурыНаСервере()
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);	
	Если Объект.Номенклатура.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда			
		НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","Номенклатура"));
		Для каждого Стр из НужныеСтроки цикл				
			Строка = Объект.Номенклатура.Добавить();
			Строка.Номенклатура1С = Стр.Объект;
			Строка.idqasl = Стр.ГУИД;
			Строка.КодСимпл = Стр.ДопЗначение1;
			Строка.Код1С = Строка.Номенклатура1С.Код;
			Строка.НаименованиеСимпл = Стр.ДопЗначение2;
			Строка.ИзХранилища = Истина;
		КонецЦикла;
	КонецЕсли;
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки,УИДФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствияНоменклатуры(Команда)
	ПоказатьСоответствияНоменклатурыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствия(Команда)
	ПоказатьСоответствияНаСервере("Контрагенты");
КонецПроцедуры

&НаСервере
Процедура ПоказатьСоответствияНаСервере(Справочник)
	СохраненныеНастройки = ПолучитьИзВременногоХранилища(АдресОбъектов);
	Если Справочник = "Контрагенты" тогда 
		Если Объект.Контрагенты.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда			
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","Поставщики"));
			Для каждого Стр из НужныеСтроки цикл				
				Строка = Объект.Контрагенты.Добавить();
				Строка.Контрагент1С = Стр.Объект;
				Строка.idqasl = Стр.ГУИД;
				Строка.КонтрагентИНН = Строка.Контрагент1С.ИНН;
				Строка.НаименованиеСимпл = Стр.ДопЗначение2;
				Строка.Договор = Стр.ДопЗначение1;
				Строка.ИзХранилища = Истина;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Справочник = "Склады" тогда
		Если Объект.Склады.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","Склады"));
			Для каждого Стр из НужныеСтроки Цикл
				Строка = Объект.Склады.Добавить();
				Строка.Склад1С = Стр.Объект;
				Строка.НаименованиеQasl = Стр.ДопЗначение2;
				Строка.КодQasl = Стр.ДопЗначение1;
				Строка.ИзХранилища = Истина;
			КонецЦикла;			
		КонецЕсли;
	ИначеЕсли Справочник = "Кассы" тогда 
		Если Объект.Кассы.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","Устройства"));
			Для каждого Стр из НужныеСтроки Цикл
				Строка = Объект.Кассы.Добавить();
				Строка.Касса1С = Стр.Объект;
				Строка.НаименованиеСИМПЛ = Стр.ДопЗначение2;
				Строка.КодСИМПЛ = Стр.ДопЗначение1;
				Строка.ИзХранилища = Истина;
			КонецЦикла;			
		КонецЕсли;
	ИначеЕсли Справочник = "Оплаты" тогда
		Если Объект.СпособыОплаты.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","СпособыОплаты"));
			Для каждого Стр из НужныеСтроки Цикл
				Строка = Объект.СпособыОплаты.Добавить();
				Строка.ТипОплаты1С = Стр.Объект;
				Строка.nameQasl = Стр.ДопЗначение2;
				Строка.Фискальный = Стр.ДопЗначение1;
				Строка.ИзХранилища = Истина;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Справочник = "Сотрудники" тогда
		Если Объект.Сотрудники.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","Сотрудники"));
			Для каждого Стр из НужныеСтроки цикл
				Строка = Объект.Сотрудники.Добавить();
				Строка.Сотрудник1С = Стр.Объект;
				Строка.КодСИМПЛ = Стр.ДопЗначение1;
				Строка.НаименованиеСИМПЛ = Стр.ДопЗначение2;
				Строка.idQasl = Стр.ГУИД;
				Строка.ИзХранилища = Истина;
			КонецЦикла;			
		КонецЕсли;
	ИначеЕсли Справочник = "СтатьиЗатрат" тогда
		Если Объект.СтатьиДДС.НайтиСтроки(Новый Структура("ИзХранилища",Истина)).Количество() = 0 тогда
			НужныеСтроки = СохраненныеНастройки.СохраненнаяНастройка.СоответствияОбъектов.НайтиСтроки(Новый Структура("ТипОбъекта","СтатьиСписаний"));
			Для каждого Стр из НужныеСтроки цикл
				Строка = Объект.СтатьиДДС.Добавить();
				Строка.СтатьяЗатрат1С = Стр.Объект;
				Строка.idqasl = Стр.ГУИД;
				Строка.СчетЗатрат1С = Стр.ДопЗначение1;
				Строка.НаименованиеСимпл = Стр.ДопЗначение2;
				Строка.ИзХранилища = Истина;
			КонецЦикла;			
		КонецЕсли;
		
	КонецЕсли;
	АдресОбъектов = ПоместитьВоВременноеХранилище(СохраненныеНастройки,УИДФормы);
КонецПроцедуры

&НаСервере
Функция СоздатьЕдиницуИзмерения(Наименование)
	Элемент = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();
	Элемент.Наименование = Наименование;
	Элемент.УстановитьНовыйКод();
	Элемент.Записать();
	Возврат Элемент.Ссылка;
КонецФункции

&НаСервере
Функция РассчитатьСуммуНДСТабЧасти(Сумма, СуммаВключаетНДС, СтавкаНДС)
	СтавкаЧисло = 0;
	Если СтавкаНДС = Перечисления.СтавкиНДС.БезНДС тогда 
		СуммаВключаетНДС = Ложь;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС10 тогда		
		СтавкаЧисло = 10;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС18 тогда
		СтавкаЧисло = 18;
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС20 тогда
		СтавкаЧисло = 20;		
	ИначеЕсли СтавкаНДС = Перечисления.СтавкиНДС.НДС0 тогда 		
	КонецЕсли; 
	
	
	Если СуммаВключаетНДС Тогда
		СуммаБезНДС = 100 * Сумма / (100 + СтавкаЧисло);
		СуммаНДС = Сумма - СуммаБезНДС;
	Иначе
		СуммаБезНДС = Сумма;
	КонецЕсли;

	Если НЕ СуммаВключаетНДС Тогда
		СуммаНДС = СуммаБезНДС * СтавкаЧисло / 100;
	КонецЕсли;
	
	Возврат СуммаНДС;	
КонецФункции

&НаСервере            
Функция ПроверитьСписание(ТЧ)
	Нужно = Ложь;
	Если ИмяКонфигурации = "УТ" тогда 
		Для каждого Стр из ТЧ цикл
			Если Стр.Количество > Стр.КоличествоФакт ИЛИ Стр.КоличествоУпаковок > Стр.КоличествоУпаковокФакт тогда 
				Нужно = Истина;
				Возврат Нужно;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого Стр из ТЧ цикл
			Если Стр.КоличествоУчет > Стр.Количество Тогда 
				Нужно = Истина;
				Возврат Нужно;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Нужно;
КонецФункции

&НаСервере            
Функция ПроверитьОприходование(ТЧ)
	Нужно = Ложь;
	Если ИмяКонфигурации = "УТ" тогда 
		Для каждого Стр из ТЧ цикл
			Если Стр.Количество < Стр.КоличествоФакт ИЛИ Стр.КоличествоУпаковок < Стр.КоличествоУпаковокФакт тогда 
				Нужно = Истина;
				Возврат Нужно;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для каждого Стр из ТЧ цикл
			Если Стр.КоличествоУчет < Стр.Количество Тогда 
				Нужно = Истина;
				Возврат Нужно;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Нужно;
КонецФункции

Функция ПолучитьОстатки(Документ)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура КАК Номенклатура,
	               |	ТоварыОрганизацийОстатки.КоличествоОстаток
	               |ИЗ
	               |	РегистрНакопления.ТоварыОрганизаций.Остатки(&Дата, АналитикаУчетаНоменклатуры.МестоХранения = &Склад) КАК ТоварыОрганизацийОстатки";
	Запрос.УстановитьПараметр("Дата",Документ.Дата);
	Запрос.УстановитьПараметр("Склад",Документ.Склад);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
	 
КонецФункции

&НаСервере
Функция СоздатьВсеДоговорыНаСервере(ИНН,Наименование,id)
	
	Контрагент = Объект.Контрагенты.НайтиСтроки(Новый Структура("idqasl",id));
	Если Контрагент.Количество() <> 0 тогда 
		КонтрагентЭлемент = Контрагент[0].Контрагент1С;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИмяКонфигурации <> "УТ" тогда
		Элемент = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(,КонтрагентЭлемент,,);
		Пока Выборка.Следующий() цикл
			Если Выборка.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком и НЕ Выборка.ПометкаУдаления тогда
				Элемент = Выборка.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;		
		КонецЦикла;
		
		Если Элемент <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
			Контрагент[0].Договор = Элемент.Ссылка;
		Иначе
			Элемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Элемент.Наименование = "Основной договор";
			Элемент.Владелец = КонтрагентЭлемент.Ссылка;
			Элемент.Организация = Организация;
			Элемент.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			Элемент.Записать();
			Контрагент[0].Договор = Элемент.Ссылка;
		КонецЕсли;
	Иначе
		Элемент = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Отбор = Новый Структура();
		Отбор.Вставить("Контрагент",КонтрагентЭлемент);
		Выборка = Справочники.ДоговорыКонтрагентов.Выбрать(,,Отбор,);
		Пока Выборка.Следующий() цикл
			Если Выборка.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком и НЕ Выборка.ПометкаУдаления тогда
				Элемент = Выборка.Ссылка;
			Иначе
				Продолжить;
			КонецЕсли;		
		КонецЦикла;
		
		Если Элемент <> Справочники.ДоговорыКонтрагентов.ПустаяСсылка() тогда
			Контрагент[0].Договор = Элемент.Ссылка;
		Иначе
			Элемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
			Элемент.Наименование = "Основной договор";
			Элемент.Контрагент = КонтрагентЭлемент.Ссылка;
			Элемент.Партнер = Элемент.Контрагент.Партнер;
			Элемент.Организация = Организация;
			Элемент.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
			Элемент.Записать();
			Контрагент[0].Договор = Элемент.Ссылка;
		КонецЕсли; 		
	КонецЕсли; 	
КонецФункции

&НаКлиенте
Процедура СоздатьВсеДоговоры(Команда)
	
	Для каждого Стр из Объект.Контрагенты цикл
		Если ЗначениеЗаполнено(Стр.Контрагент1С) тогда 
			Договор = СоздатьВсеДоговорыНаСервере(Стр.КонтрагентИНН,Стр.НаименованиеСИМПЛ,Стр.idqasl);
		КонецЕсли;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствияСкладов(Команда)
	ПоказатьСоответствияНаСервере("Склады");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствияКасс(Команда)
	ПоказатьСоответствияНаСервере("Кассы");
КонецПроцедуры


&НаКлиенте
Процедура ПоказатьСоответствияОплат(Команда)
	ПоказатьСоответствияНаСервере("Оплаты");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствияСотрудников(Команда)
	ПоказатьСоответствияНаСервере("Сотрудники");
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСоответствияСтатей(Команда)
	ПоказатьСоответствияНаСервере("СтатьиЗатрат");
КонецПроцедуры

&НаСервере
Функция ПолучитьНомГруппу()
	Выборка = Справочники.НоменклатурныеГруппы.Выбрать();
	Пока Выборка.Следующий() цикл
		  Возврат Выборка.Ссылка;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьРеквизитов()
	Ошибка = 0;
	Если НЕ ЗначениеЗаполнено(Организация) тогда 
		Сообщить("Заполните реквизит ""Организация""!");
		Ошибка = Ошибка + 1;
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.СвободныйТовар) тогда 
		Сообщить("Заполните реквизит ""Товар по свободной цене!""");
		Ошибка = Ошибка + 1;
	КонецЕсли;
	
	Если (ПН ИЛИ ИН) И НЕ ЗначениеЗаполнено(СтатьяПрочихДоходовРасходов) тогда 
		Сообщить("Заполните реквизит ""Статья прочих доходов и расходов!""");
		Ошибка = Ошибка + 1;	
	КонецЕсли;
	
	Возврат Ошибка;	
КонецФункции

&НаСервере
Функция ПроверитьОрганизацию()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Организации.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Организации КАК Организации";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() < 2 тогда 
		Организация = Результат[0].Ссылка;
	КонецЕсли;
	Возврат Организация;	
КонецФункции


&НаСервере
Процедура ОчиститьВсеСоответствияНаСервере()
	ХранилищеОбщихНастроек.Удалить("ЗагрузкаСИМПЛ",неопределено,неопределено);
	Настройки = СоздатьСтруктуруНастроек();
	ХранилищеОбщихНастроек.Сохранить("ЗагрузкаСИМПЛ",,Настройки,);
	АдресОбъектов = ПоместитьВоВременноеХранилище(Настройки,УИДФормы);
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьВсеСоответствия(Команда)
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьВсеСоответствияЗавершение", ЭтаФорма), "Удалить все настройки соответствий справочников и документов?", РежимДиалогаВопрос.ДаНет);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВсеСоответствияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса; 
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьВсеСоответствияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроксиПриИзменении(Элемент)
	Элементы.ПроксиПользователь.Видимость = ИспользоватьПрокси;
	Элементы.ПроксиПароль.Видимость = ИспользоватьПрокси;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтавкуНДС2(СтавкаНДС) Экспорт
	
	Если СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10")
		Или СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС10_110") Тогда
		Возврат 10;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18")
		Или СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС18_118") Тогда
		Возврат 18;
	ИначеЕсли СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20")
		Или СтавкаНДС = ПредопределенноеЗначение("Перечисление.СтавкиНДС.НДС20_120") Тогда
		Возврат 20;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

